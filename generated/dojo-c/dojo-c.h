// File automatically generated by swift-bridge.
#include <stdint.h>
#include <stdbool.h>
typedef struct Subscription Subscription;
void __swift_bridge__$Subscription$_free(void* self);

void* __swift_bridge__$Vec_Subscription$new(void);
void __swift_bridge__$Vec_Subscription$drop(void* vec_ptr);
void __swift_bridge__$Vec_Subscription$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_Subscription$pop(void* vec_ptr);
void* __swift_bridge__$Vec_Subscription$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_Subscription$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_Subscription$len(void* vec_ptr);
void* __swift_bridge__$Vec_Subscription$as_ptr(void* vec_ptr);

typedef struct ToriiClientError ToriiClientError;
void __swift_bridge__$ToriiClientError$_free(void* self);

void* __swift_bridge__$Vec_ToriiClientError$new(void);
void __swift_bridge__$Vec_ToriiClientError$drop(void* vec_ptr);
void __swift_bridge__$Vec_ToriiClientError$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ToriiClientError$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ToriiClientError$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ToriiClientError$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ToriiClientError$len(void* vec_ptr);
void* __swift_bridge__$Vec_ToriiClientError$as_ptr(void* vec_ptr);

typedef struct ToriiClient ToriiClient;
void __swift_bridge__$ToriiClient$_free(void* self);

void* __swift_bridge__$Vec_ToriiClient$new(void);
void __swift_bridge__$Vec_ToriiClient$drop(void* vec_ptr);
void __swift_bridge__$Vec_ToriiClient$push(void* vec_ptr, void* item_ptr);
void* __swift_bridge__$Vec_ToriiClient$pop(void* vec_ptr);
void* __swift_bridge__$Vec_ToriiClient$get(void* vec_ptr, uintptr_t index);
void* __swift_bridge__$Vec_ToriiClient$get_mut(void* vec_ptr, uintptr_t index);
uintptr_t __swift_bridge__$Vec_ToriiClient$len(void* vec_ptr);
void* __swift_bridge__$Vec_ToriiClient$as_ptr(void* vec_ptr);

typedef struct __swift_bridge__$FeltBridge { void* hex; } __swift_bridge__$FeltBridge;
typedef struct __swift_bridge__$Option$FeltBridge { bool is_some; __swift_bridge__$FeltBridge val; } __swift_bridge__$Option$FeltBridge;
typedef struct __swift_bridge__$PageBridge { void* data; } __swift_bridge__$PageBridge;
typedef struct __swift_bridge__$Option$PageBridge { bool is_some; __swift_bridge__$PageBridge val; } __swift_bridge__$Option$PageBridge;
typedef struct __swift_bridge__$WorldBridge { struct __swift_bridge__$FeltBridge world_address; void* models_json; } __swift_bridge__$WorldBridge;
typedef struct __swift_bridge__$Option$WorldBridge { bool is_some; __swift_bridge__$WorldBridge val; } __swift_bridge__$Option$WorldBridge;
typedef struct __swift_bridge__$QueryBridge { uint32_t limit; void* cursor; void* world_addresses; bool dont_include_hashed_keys; } __swift_bridge__$QueryBridge;
typedef struct __swift_bridge__$Option$QueryBridge { bool is_some; __swift_bridge__$QueryBridge val; } __swift_bridge__$Option$QueryBridge;
typedef struct __swift_bridge__$U256Bridge { void* hex; } __swift_bridge__$U256Bridge;
typedef struct __swift_bridge__$Option$U256Bridge { bool is_some; __swift_bridge__$U256Bridge val; } __swift_bridge__$Option$U256Bridge;
typedef struct __swift_bridge__$EntityBridge { struct __swift_bridge__$FeltBridge world_address; struct __swift_bridge__$FeltBridge hashed_keys; void* models_json; uint64_t created_at; uint64_t updated_at; uint64_t executed_at; } __swift_bridge__$EntityBridge;
typedef struct __swift_bridge__$Option$EntityBridge { bool is_some; __swift_bridge__$EntityBridge val; } __swift_bridge__$Option$EntityBridge;
typedef struct __swift_bridge__$ModelBridge { struct __swift_bridge__$FeltBridge world_address; void* namespace; void* name; struct __swift_bridge__$FeltBridge selector; uint32_t packed_size; uint32_t unpacked_size; struct __swift_bridge__$FeltBridge class_hash; struct __swift_bridge__$FeltBridge contract_address; void* layout_json; void* schema_json; bool use_legacy_store; } __swift_bridge__$ModelBridge;
typedef struct __swift_bridge__$Option$ModelBridge { bool is_some; __swift_bridge__$ModelBridge val; } __swift_bridge__$Option$ModelBridge;
typedef struct __swift_bridge__$TokenBridge { struct __swift_bridge__$FeltBridge contract_address; void* token_id; void* name; void* symbol; uint8_t decimals; void* metadata; void* total_supply; } __swift_bridge__$TokenBridge;
typedef struct __swift_bridge__$Option$TokenBridge { bool is_some; __swift_bridge__$TokenBridge val; } __swift_bridge__$Option$TokenBridge;
typedef struct __swift_bridge__$TokenBalanceBridge { struct __swift_bridge__$U256Bridge balance; struct __swift_bridge__$FeltBridge account_address; struct __swift_bridge__$FeltBridge contract_address; void* token_id; } __swift_bridge__$TokenBalanceBridge;
typedef struct __swift_bridge__$Option$TokenBalanceBridge { bool is_some; __swift_bridge__$TokenBalanceBridge val; } __swift_bridge__$Option$TokenBalanceBridge;
typedef struct __swift_bridge__$TokenContractBridge { struct __swift_bridge__$FeltBridge contract_address; void* name; void* symbol; uint8_t decimals; void* metadata; void* token_metadata; void* total_supply; } __swift_bridge__$TokenContractBridge;
typedef struct __swift_bridge__$Option$TokenContractBridge { bool is_some; __swift_bridge__$TokenContractBridge val; } __swift_bridge__$Option$TokenContractBridge;
typedef struct __swift_bridge__$TokenTransferBridge { void* id; struct __swift_bridge__$FeltBridge contract_address; struct __swift_bridge__$FeltBridge from_address; struct __swift_bridge__$FeltBridge to_address; struct __swift_bridge__$U256Bridge amount; void* token_id; uint64_t executed_at; void* event_id; } __swift_bridge__$TokenTransferBridge;
typedef struct __swift_bridge__$Option$TokenTransferBridge { bool is_some; __swift_bridge__$TokenTransferBridge val; } __swift_bridge__$Option$TokenTransferBridge;
typedef struct __swift_bridge__$ControllerBridge { struct __swift_bridge__$FeltBridge address; void* username; uint64_t deployed_at_timestamp; } __swift_bridge__$ControllerBridge;
typedef struct __swift_bridge__$Option$ControllerBridge { bool is_some; __swift_bridge__$ControllerBridge val; } __swift_bridge__$Option$ControllerBridge;
typedef struct __swift_bridge__$ContractBridge { struct __swift_bridge__$FeltBridge contract_address; void* contract_type; void* head; void* tps; void* last_block_timestamp; void* last_pending_block_tx; uint64_t updated_at; uint64_t created_at; } __swift_bridge__$ContractBridge;
typedef struct __swift_bridge__$Option$ContractBridge { bool is_some; __swift_bridge__$ContractBridge val; } __swift_bridge__$Option$ContractBridge;
typedef struct __swift_bridge__$TransactionBridge { struct __swift_bridge__$FeltBridge transaction_hash; struct __swift_bridge__$FeltBridge sender_address; void* calldata; struct __swift_bridge__$FeltBridge max_fee; void* signature; struct __swift_bridge__$FeltBridge nonce; uint64_t block_number; void* transaction_type; uint64_t block_timestamp; void* calls_json; void* unique_models; } __swift_bridge__$TransactionBridge;
typedef struct __swift_bridge__$Option$TransactionBridge { bool is_some; __swift_bridge__$TransactionBridge val; } __swift_bridge__$Option$TransactionBridge;
typedef struct __swift_bridge__$TransactionCallBridge { struct __swift_bridge__$FeltBridge contract_address; void* entrypoint; void* calldata; void* call_type; struct __swift_bridge__$FeltBridge caller_address; } __swift_bridge__$TransactionCallBridge;
typedef struct __swift_bridge__$Option$TransactionCallBridge { bool is_some; __swift_bridge__$TransactionCallBridge val; } __swift_bridge__$Option$TransactionCallBridge;
typedef struct __swift_bridge__$EventBridge { void* keys; void* data; struct __swift_bridge__$FeltBridge transaction_hash; } __swift_bridge__$EventBridge;
typedef struct __swift_bridge__$Option$EventBridge { bool is_some; __swift_bridge__$EventBridge val; } __swift_bridge__$Option$EventBridge;
typedef struct __swift_bridge__$AggregationEntryBridge { void* id; void* aggregator_id; void* entity_id; struct __swift_bridge__$U256Bridge value; void* display_value; uint64_t position; void* model_id; uint64_t created_at; uint64_t updated_at; } __swift_bridge__$AggregationEntryBridge;
typedef struct __swift_bridge__$Option$AggregationEntryBridge { bool is_some; __swift_bridge__$AggregationEntryBridge val; } __swift_bridge__$Option$AggregationEntryBridge;
typedef struct __swift_bridge__$ActivityBridge { void* id; struct __swift_bridge__$FeltBridge world_address; void* namespace; struct __swift_bridge__$FeltBridge caller_address; uint64_t session_start; uint64_t session_end; uint32_t action_count; void* actions_json; uint64_t updated_at; } __swift_bridge__$ActivityBridge;
typedef struct __swift_bridge__$Option$ActivityBridge { bool is_some; __swift_bridge__$ActivityBridge val; } __swift_bridge__$Option$ActivityBridge;
typedef struct __swift_bridge__$ActionCountBridge { void* action_name; uint32_t count; } __swift_bridge__$ActionCountBridge;
typedef struct __swift_bridge__$Option$ActionCountBridge { bool is_some; __swift_bridge__$ActionCountBridge val; } __swift_bridge__$Option$ActionCountBridge;
typedef struct __swift_bridge__$AchievementBridge { void* id; struct __swift_bridge__$FeltBridge world_address; void* namespace; void* entity_id; bool hidden; uint32_t index; uint32_t points; void* start; void* end; void* group; void* icon; void* title; void* description; void* tasks_json; void* data; uint32_t total_completions; double completion_rate; uint64_t created_at; uint64_t updated_at; } __swift_bridge__$AchievementBridge;
typedef struct __swift_bridge__$Option$AchievementBridge { bool is_some; __swift_bridge__$AchievementBridge val; } __swift_bridge__$Option$AchievementBridge;
typedef struct __swift_bridge__$AchievementTaskBridge { void* task_id; void* description; uint32_t total; uint32_t total_completions; double completion_rate; uint64_t created_at; } __swift_bridge__$AchievementTaskBridge;
typedef struct __swift_bridge__$Option$AchievementTaskBridge { bool is_some; __swift_bridge__$AchievementTaskBridge val; } __swift_bridge__$Option$AchievementTaskBridge;
typedef struct __swift_bridge__$PlayerAchievementEntryBridge { struct __swift_bridge__$FeltBridge player_address; struct __swift_bridge__$PlayerAchievementStatsBridge stats; void* achievements_json; } __swift_bridge__$PlayerAchievementEntryBridge;
typedef struct __swift_bridge__$Option$PlayerAchievementEntryBridge { bool is_some; __swift_bridge__$PlayerAchievementEntryBridge val; } __swift_bridge__$Option$PlayerAchievementEntryBridge;
typedef struct __swift_bridge__$PlayerAchievementStatsBridge { uint32_t total_points; uint32_t completed_achievements; uint32_t total_achievements; double completion_percentage; void* last_achievement_at; uint64_t created_at; uint64_t updated_at; } __swift_bridge__$PlayerAchievementStatsBridge;
typedef struct __swift_bridge__$Option$PlayerAchievementStatsBridge { bool is_some; __swift_bridge__$PlayerAchievementStatsBridge val; } __swift_bridge__$Option$PlayerAchievementStatsBridge;
typedef struct __swift_bridge__$PlayerAchievementProgressBridge { struct __swift_bridge__$AchievementBridge achievement; void* task_progress_json; bool completed; double progress_percentage; } __swift_bridge__$PlayerAchievementProgressBridge;
typedef struct __swift_bridge__$Option$PlayerAchievementProgressBridge { bool is_some; __swift_bridge__$PlayerAchievementProgressBridge val; } __swift_bridge__$Option$PlayerAchievementProgressBridge;
typedef struct __swift_bridge__$TaskProgressBridge { void* task_id; uint32_t count; bool completed; } __swift_bridge__$TaskProgressBridge;
typedef struct __swift_bridge__$Option$TaskProgressBridge { bool is_some; __swift_bridge__$TaskProgressBridge val; } __swift_bridge__$Option$TaskProgressBridge;
void __swift_bridge__$new_torii_client(void* callback_wrapper, void __swift_bridge__$new_torii_client$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* torii_url);
void __swift_bridge__$new_torii_client_with_config(void* callback_wrapper, void __swift_bridge__$new_torii_client_with_config$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* torii_url, uintptr_t max_message_size);
void* __swift_bridge__$ToriiClientError$message(void* self);
uint64_t __swift_bridge__$Subscription$id(void* self);
void __swift_bridge__$Subscription$cancel(void* self);
void __swift_bridge__$ToriiClient$worlds(void* callback_wrapper, void __swift_bridge__$ToriiClient$worlds$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* world_addresses);
void __swift_bridge__$ToriiClient$publish_message(void* callback_wrapper, void __swift_bridge__$ToriiClient$publish_message$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* message_json);
void __swift_bridge__$ToriiClient$publish_message_batch(void* callback_wrapper, void __swift_bridge__$ToriiClient$publish_message_batch$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* messages_json);
void __swift_bridge__$ToriiClient$entities(void* callback_wrapper, void __swift_bridge__$ToriiClient$entities$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, struct __swift_bridge__$QueryBridge query);
void __swift_bridge__$ToriiClient$event_messages(void* callback_wrapper, void __swift_bridge__$ToriiClient$event_messages$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, struct __swift_bridge__$QueryBridge query);
void __swift_bridge__$ToriiClient$starknet_events(void* callback_wrapper, void __swift_bridge__$ToriiClient$starknet_events$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* keys_json, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$tokens(void* callback_wrapper, void __swift_bridge__$ToriiClient$tokens$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* contract_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$token_balances(void* callback_wrapper, void __swift_bridge__$ToriiClient$token_balances$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* account_addresses, void* contract_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$token_contracts(void* callback_wrapper, void __swift_bridge__$ToriiClient$token_contracts$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* contract_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$token_transfers(void* callback_wrapper, void __swift_bridge__$ToriiClient$token_transfers$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* account_addresses, void* contract_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$transactions(void* callback_wrapper, void __swift_bridge__$ToriiClient$transactions$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* filter_json, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$contracts(void* callback_wrapper, void __swift_bridge__$ToriiClient$contracts$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* contract_addresses);
void __swift_bridge__$ToriiClient$controllers(void* callback_wrapper, void __swift_bridge__$ToriiClient$controllers$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* contract_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$aggregations(void* callback_wrapper, void __swift_bridge__$ToriiClient$aggregations$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* aggregator_ids, void* entity_ids, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$activities(void* callback_wrapper, void __swift_bridge__$ToriiClient$activities$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* world_addresses, void* namespaces, void* caller_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$achievements(void* callback_wrapper, void __swift_bridge__$ToriiClient$achievements$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* world_addresses, void* namespaces, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$player_achievements(void* callback_wrapper, void __swift_bridge__$ToriiClient$player_achievements$async(void* callback_wrapper, struct __swift_bridge__$ResultPageBridgeAndToriiClientError ret), void* self, void* world_addresses, void* namespaces, void* player_addresses, uint32_t limit, void* cursor);
void __swift_bridge__$ToriiClient$sql(void* callback_wrapper, void __swift_bridge__$ToriiClient$sql$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* query);
void __swift_bridge__$ToriiClient$on_entity_updated(void* callback_wrapper, void __swift_bridge__$ToriiClient$on_entity_updated$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* clause_json, void* world_addresses);
void __swift_bridge__$ToriiClient$on_starknet_event(void* callback_wrapper, void __swift_bridge__$ToriiClient$on_starknet_event$async(void* callback_wrapper, struct __private__ResultPtrAndPtr ret), void* self, void* keys_json);
typedef enum __swift_bridge__$ResultPageBridgeAndToriiClientError$Tag {__swift_bridge__$ResultPageBridgeAndToriiClientError$ResultOk, __swift_bridge__$ResultPageBridgeAndToriiClientError$ResultErr} __swift_bridge__$ResultPageBridgeAndToriiClientError$Tag;
union __swift_bridge__$ResultPageBridgeAndToriiClientError$Fields {struct __swift_bridge__$PageBridge ok; void* err;};
typedef struct __swift_bridge__$ResultPageBridgeAndToriiClientError{__swift_bridge__$ResultPageBridgeAndToriiClientError$Tag tag; union __swift_bridge__$ResultPageBridgeAndToriiClientError$Fields payload;} __swift_bridge__$ResultPageBridgeAndToriiClientError;


