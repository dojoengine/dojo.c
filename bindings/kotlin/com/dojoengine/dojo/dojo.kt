// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.dojoengine.dojo

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.IntegerType
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.Callback
import com.sun.jna.ptr.*
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicBoolean

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

/**
 * @suppress
 */
@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0
    @JvmField var len: Long = 0
    @JvmField var data: Pointer? = null

    class ByValue: RustBuffer(), Structure.ByValue
    class ByReference: RustBuffer(), Structure.ByReference

   internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) = uniffiRustCall() { status ->
            // Note: need to convert the size to a `Long` value to make this work with JVM.
            UniffiLib.ffi_dojo_uniffi_rustbuffer_alloc(size.toLong(), status)
        }.also {
            if(it.data == null) {
               throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
           }
        }

        internal fun create(capacity: ULong, len: ULong, data: Pointer?): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) = uniffiRustCall() { status ->
            UniffiLib.ffi_dojo_uniffi_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
internal open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
/**
 * The FfiConverter interface handles converter types to and from the FFI
 *
 * All implementing objects should be public to support external types.  When a
 * type is external we need to import it's FfiConverter.
 *
 * @suppress
 */
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

/**
 * FfiConverter that uses `RustBuffer` as the FfiType
 *
 * @suppress
 */
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue: UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(code: Byte, errorBuf: RustBuffer.ByValue): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : kotlin.Exception(message)

/**
 * Each top-level error class has a companion object that can lift the error from the call status's rust buffer
 *
 * @suppress
 */
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: kotlin.Exception> uniffiRustCallWithError(errorHandler: UniffiRustCallStatusErrorHandler<E>, callback: (UniffiRustCallStatus) -> U): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun<E: kotlin.Exception> uniffiCheckCallStatus(errorHandler: UniffiRustCallStatusErrorHandler<E>, status: UniffiRustCallStatus) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

/**
 * UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
 *
 * @suppress
 */
object UniffiNullRustCallStatusErrorHandler: UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun<T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun<T, reified E: Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue
) {
    try {
        writeReturn(makeCall())
    } catch(e: kotlin.Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}
// Initial value and increment amount for handles. 
// These ensure that Kotlin-generated handles always have the lowest bit set
private const val UNIFFI_HANDLEMAP_INITIAL = 1.toLong()
private const val UNIFFI_HANDLEMAP_DELTA = 2.toLong()

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T: Any> {
    private val map = ConcurrentHashMap<Long, T>()
    // Start 
    private val counter = java.util.concurrent.atomic.AtomicLong(UNIFFI_HANDLEMAP_INITIAL)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(UNIFFI_HANDLEMAP_DELTA)
        map.put(handle, obj)
        return handle
    }

    // Clone a handle, creating a new one
    fun clone(handle: Long): Long {
        val obj = map.get(handle) ?: throw InternalException("UniffiHandleMap.clone: Invalid handle")
        return insert(obj)
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "dojo_uniffi"
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(`data`: Long,`pollResult`: Byte,)
}
internal interface UniffiForeignFutureDroppedCallback : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
}
internal interface UniffiCallbackInterfaceClone : com.sun.jna.Callback {
    fun callback(`handle`: Long,)
    : Long
}
@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFutureDroppedCallbackStruct(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureDroppedCallback? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureDroppedCallback? = null,
    ): UniffiForeignFutureDroppedCallbackStruct(`handle`,`free`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureDroppedCallbackStruct) {
        `handle` = other.`handle`
        `free` = other.`free`
    }

}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI8(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI8.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI16(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI16.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultU64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultU64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultI64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultI64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultF32(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultF32.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultF64(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultF64.UniffiByValue,)
}
@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureResultRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultRustBuffer(`returnValue`,`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultRustBuffer.UniffiByValue,)
}
@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureResultVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ): UniffiForeignFutureResultVoid(`callStatus`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiForeignFutureResultVoid) {
        `callStatus` = other.`callStatus`
    }

}
internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(`callbackData`: Long,`result`: UniffiForeignFutureResultVoid.UniffiByValue,)
}
internal interface UniffiCallbackInterfaceEntityUpdateCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`entity`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEntityUpdateCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEventUpdateCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceEventUpdateCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`balance`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTokenUpdateCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`token`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTokenUpdateCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTransactionUpdateCallbackMethod0 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
internal interface UniffiCallbackInterfaceTransactionUpdateCallbackMethod1 : com.sun.jna.Callback {
    fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,)
}
@Structure.FieldOrder("uniffiFree", "uniffiClone", "onUpdate", "onError")
internal open class UniffiVTableCallbackInterfaceEntityUpdateCallback(
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    @JvmField internal var `uniffiClone`: UniffiCallbackInterfaceClone? = null,
    @JvmField internal var `onUpdate`: UniffiCallbackInterfaceEntityUpdateCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceEntityUpdateCallbackMethod1? = null,
) : Structure() {
    class UniffiByValue(
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
        `uniffiClone`: UniffiCallbackInterfaceClone? = null,
        `onUpdate`: UniffiCallbackInterfaceEntityUpdateCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceEntityUpdateCallbackMethod1? = null,
    ): UniffiVTableCallbackInterfaceEntityUpdateCallback(`uniffiFree`,`uniffiClone`,`onUpdate`,`onError`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEntityUpdateCallback) {
        `uniffiFree` = other.`uniffiFree`
        `uniffiClone` = other.`uniffiClone`
        `onUpdate` = other.`onUpdate`
        `onError` = other.`onError`
    }

}
@Structure.FieldOrder("uniffiFree", "uniffiClone", "onUpdate", "onError")
internal open class UniffiVTableCallbackInterfaceEventUpdateCallback(
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    @JvmField internal var `uniffiClone`: UniffiCallbackInterfaceClone? = null,
    @JvmField internal var `onUpdate`: UniffiCallbackInterfaceEventUpdateCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceEventUpdateCallbackMethod1? = null,
) : Structure() {
    class UniffiByValue(
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
        `uniffiClone`: UniffiCallbackInterfaceClone? = null,
        `onUpdate`: UniffiCallbackInterfaceEventUpdateCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceEventUpdateCallbackMethod1? = null,
    ): UniffiVTableCallbackInterfaceEventUpdateCallback(`uniffiFree`,`uniffiClone`,`onUpdate`,`onError`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceEventUpdateCallback) {
        `uniffiFree` = other.`uniffiFree`
        `uniffiClone` = other.`uniffiClone`
        `onUpdate` = other.`onUpdate`
        `onError` = other.`onError`
    }

}
@Structure.FieldOrder("uniffiFree", "uniffiClone", "onUpdate", "onError")
internal open class UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback(
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    @JvmField internal var `uniffiClone`: UniffiCallbackInterfaceClone? = null,
    @JvmField internal var `onUpdate`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1? = null,
) : Structure() {
    class UniffiByValue(
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
        `uniffiClone`: UniffiCallbackInterfaceClone? = null,
        `onUpdate`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1? = null,
    ): UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback(`uniffiFree`,`uniffiClone`,`onUpdate`,`onError`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback) {
        `uniffiFree` = other.`uniffiFree`
        `uniffiClone` = other.`uniffiClone`
        `onUpdate` = other.`onUpdate`
        `onError` = other.`onError`
    }

}
@Structure.FieldOrder("uniffiFree", "uniffiClone", "onUpdate", "onError")
internal open class UniffiVTableCallbackInterfaceTokenUpdateCallback(
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    @JvmField internal var `uniffiClone`: UniffiCallbackInterfaceClone? = null,
    @JvmField internal var `onUpdate`: UniffiCallbackInterfaceTokenUpdateCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceTokenUpdateCallbackMethod1? = null,
) : Structure() {
    class UniffiByValue(
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
        `uniffiClone`: UniffiCallbackInterfaceClone? = null,
        `onUpdate`: UniffiCallbackInterfaceTokenUpdateCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceTokenUpdateCallbackMethod1? = null,
    ): UniffiVTableCallbackInterfaceTokenUpdateCallback(`uniffiFree`,`uniffiClone`,`onUpdate`,`onError`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceTokenUpdateCallback) {
        `uniffiFree` = other.`uniffiFree`
        `uniffiClone` = other.`uniffiClone`
        `onUpdate` = other.`onUpdate`
        `onError` = other.`onError`
    }

}
@Structure.FieldOrder("uniffiFree", "uniffiClone", "onUpdate", "onError")
internal open class UniffiVTableCallbackInterfaceTransactionUpdateCallback(
    @JvmField internal var `uniffiFree`: UniffiCallbackInterfaceFree? = null,
    @JvmField internal var `uniffiClone`: UniffiCallbackInterfaceClone? = null,
    @JvmField internal var `onUpdate`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod0? = null,
    @JvmField internal var `onError`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod1? = null,
) : Structure() {
    class UniffiByValue(
        `uniffiFree`: UniffiCallbackInterfaceFree? = null,
        `uniffiClone`: UniffiCallbackInterfaceClone? = null,
        `onUpdate`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod0? = null,
        `onError`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod1? = null,
    ): UniffiVTableCallbackInterfaceTransactionUpdateCallback(`uniffiFree`,`uniffiClone`,`onUpdate`,`onError`,), Structure.ByValue

   internal fun uniffiSetValue(other: UniffiVTableCallbackInterfaceTransactionUpdateCallback) {
        `uniffiFree` = other.`uniffiFree`
        `uniffiClone` = other.`uniffiClone`
        `onUpdate` = other.`onUpdate`
        `onError` = other.`onError`
    }

}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

// For large crates we prevent `MethodTooLargeException` (see #2340)
// N.B. the name of the extension is very misleading, since it is
// rather `InterfaceTooLargeException`, caused by too many methods
// in the interface for large crates.
//
// By splitting the otherwise huge interface into two parts
// * UniffiLib (this)
// * IntegrityCheckingUniffiLib
// And all checksum methods are put into `IntegrityCheckingUniffiLib`
// we allow for ~2x as many methods in the UniffiLib interface.
//
// Note: above all written when we used JNA's `loadIndirect` etc.
// We now use JNA's "direct mapping" - unclear if same considerations apply exactly.
internal object IntegrityCheckingUniffiLib {
    init {
        Native.register(IntegrityCheckingUniffiLib::class.java, findLibraryName(componentName = "dojo"))
        uniffiCheckContractApiVersion(this)
        uniffiCheckApiChecksums(this)
    }
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_achievements(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_activities(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_contracts(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_controllers(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_entities(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_sql(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_tokens(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_transactions(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_toriiclient_worlds(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_constructor_toriiclient_new(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update(
    ): Short
    external fun uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error(
    ): Short
    external fun ffi_dojo_uniffi_uniffi_contract_version(
    ): Int
    
        
}

internal object UniffiLib {
    
    // The Cleaner for the whole library
    internal val CLEANER: UniffiCleaner by lazy {
        UniffiCleaner.create()
    }
    

    init {
        Native.register(UniffiLib::class.java, findLibraryName(componentName = "dojo"))
        uniffiCallbackInterfaceEntityUpdateCallback.register(this)
        uniffiCallbackInterfaceEventUpdateCallback.register(this)
        uniffiCallbackInterfaceTokenBalanceUpdateCallback.register(this)
        uniffiCallbackInterfaceTokenUpdateCallback.register(this)
        uniffiCallbackInterfaceTransactionUpdateCallback.register(this)
        
    }
    external fun uniffi_dojo_uniffi_fn_clone_toriiclient(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_free_toriiclient(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit
external fun uniffi_dojo_uniffi_fn_constructor_toriiclient_new(`toriiUrl`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(`toriiUrl`: RustBuffer.ByValue,`maxMessageSize`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_achievements(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_activities(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(`ptr`: Long,`subscriptionId`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit
external fun uniffi_dojo_uniffi_fn_method_toriiclient_contracts(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_controllers(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_entities(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(`ptr`: Long,`message`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(`ptr`: Long,`messages`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_sql(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(`ptr`: Long,`clause`: RustBuffer.ByValue,`worldAddresses`: RustBuffer.ByValue,`callback`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(`ptr`: Long,`keys`: RustBuffer.ByValue,`callback`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(`ptr`: Long,`contractAddresses`: RustBuffer.ByValue,`accountAddresses`: RustBuffer.ByValue,`tokenIds`: RustBuffer.ByValue,`callback`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(`ptr`: Long,`contractAddresses`: RustBuffer.ByValue,`tokenIds`: RustBuffer.ByValue,`callback`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(`ptr`: Long,`filter`: RustBuffer.ByValue,`callback`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_tokens(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_transactions(`ptr`: Long,`query`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_method_toriiclient_worlds(`ptr`: Long,`worldAddresses`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(`vtable`: UniffiVTableCallbackInterfaceEntityUpdateCallback,
): Unit
external fun uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(`vtable`: UniffiVTableCallbackInterfaceEventUpdateCallback,
): Unit
external fun uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(`vtable`: UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback,
): Unit
external fun uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(`vtable`: UniffiVTableCallbackInterfaceTokenUpdateCallback,
): Unit
external fun uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(`vtable`: UniffiVTableCallbackInterfaceTransactionUpdateCallback,
): Unit
external fun ffi_dojo_uniffi_rustbuffer_alloc(`size`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun ffi_dojo_uniffi_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun ffi_dojo_uniffi_rustbuffer_free(`buf`: RustBuffer.ByValue,uniffi_out_err: UniffiRustCallStatus, 
): Unit
external fun ffi_dojo_uniffi_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun ffi_dojo_uniffi_rust_future_poll_u8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_u8(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_u8(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_u8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
external fun ffi_dojo_uniffi_rust_future_poll_i8(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_i8(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_i8(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_i8(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Byte
external fun ffi_dojo_uniffi_rust_future_poll_u16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_u16(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_u16(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_u16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
external fun ffi_dojo_uniffi_rust_future_poll_i16(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_i16(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_i16(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_i16(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Short
external fun ffi_dojo_uniffi_rust_future_poll_u32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_u32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_u32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_u32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
external fun ffi_dojo_uniffi_rust_future_poll_i32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_i32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_i32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_i32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Int
external fun ffi_dojo_uniffi_rust_future_poll_u64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_u64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_u64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_u64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun ffi_dojo_uniffi_rust_future_poll_i64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_i64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_i64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_i64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Long
external fun ffi_dojo_uniffi_rust_future_poll_f32(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_f32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_f32(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_f32(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Float
external fun ffi_dojo_uniffi_rust_future_poll_f64(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_f64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_f64(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_f64(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Double
external fun ffi_dojo_uniffi_rust_future_poll_rust_buffer(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_rust_buffer(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_rust_buffer(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_rust_buffer(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): RustBuffer.ByValue
external fun ffi_dojo_uniffi_rust_future_poll_void(`handle`: Long,`callback`: UniffiRustFutureContinuationCallback,`callbackData`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_cancel_void(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_free_void(`handle`: Long,
): Unit
external fun ffi_dojo_uniffi_rust_future_complete_void(`handle`: Long,uniffi_out_err: UniffiRustCallStatus, 
): Unit

    
}

private fun uniffiCheckContractApiVersion(lib: IntegrityCheckingUniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 30
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_dojo_uniffi_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}
@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: IntegrityCheckingUniffiLib) {
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_achievements() != 45327.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_activities() != 43349.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations() != 12858.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription() != 31182.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_contracts() != 1861.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_controllers() != 55573.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_entities() != 50647.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages() != 35425.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements() != 61773.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message() != 30179.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch() != 2146.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_sql() != 38286.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events() != 44694.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates() != 17350.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates() != 63983.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates() != 26741.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates() != 54836.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates() != 10040.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances() != 1716.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts() != 49563.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers() != 10363.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_tokens() != 10630.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_transactions() != 46460.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_toriiclient_worlds() != 23254.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_constructor_toriiclient_new() != 18057.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config() != 42232.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update() != 15850.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error() != 340.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update() != 13627.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error() != 61050.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update() != 10763.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error() != 46610.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update() != 40037.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error() != 14408.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update() != 11896.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error() != 18113.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

/**
 * @suppress
 */
public fun uniffiEnsureInitialized() {
    IntegrityCheckingUniffiLib
    // UniffiLib() initialized as objects are used, but we still need to explicitly
    // reference it so initialization across crates works as expected.
    UniffiLib
}

// Async support

// Public interface members begin here.


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            for (arg in args) {
                when (arg) {
                    is Disposable -> arg.destroy()
                    is ArrayList<*> -> {
                        for (idx in arg.indices) {
                            val element = arg[idx]
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Map<*, *> -> {
                        for (element in arg.values) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                    is Iterable<*> -> {
                        for (element in arg) {
                            if (element is Disposable) {
                                element.destroy()
                            }
                        }
                    }
                }
            }
        }
    }
}

/**
 * @suppress
 */
inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** 
 * Placeholder object used to signal that we're constructing an interface with a FFI handle.
 *
 * This is the first argument for interface constructors that input a raw handle. It exists is that
 * so we can avoid signature conflicts when an interface has a regular constructor than inputs a
 * Long.
 *
 * @suppress
 * */
object UniffiWithHandle

/** 
 * Used to instantiate an interface without an actual pointer, for fakes in tests, mostly.
 *
 * @suppress
 * */
object NoHandle// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0
// Callback return codes
internal const val UNIFFI_CALLBACK_SUCCESS = 0
internal const val UNIFFI_CALLBACK_ERROR = 1
internal const val UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

/**
 * @suppress
 */
public abstract class FfiConverterCallbackInterface<CallbackInterface: Any>: FfiConverter<CallbackInterface, Long> {
    internal val handleMap = UniffiHandleMap<CallbackInterface>()

    internal fun drop(handle: Long) {
        handleMap.remove(handle)
    }

    override fun lift(value: Long): CallbackInterface {
        return handleMap.get(value)
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) = handleMap.insert(value)

    override fun allocationSize(value: CallbackInterface) = 8UL

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}
/**
 * The cleaner interface for Object finalization code to run.
 * This is the entry point to any implementation that we're using.
 *
 * The cleaner registers objects and returns cleanables, so now we are
 * defining a `UniffiCleaner` with a `UniffiClenaer.Cleanable` to abstract the
 * different implmentations available at compile time.
 *
 * @suppress
 */
interface UniffiCleaner {
    interface Cleanable {
        fun clean()
    }

    fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable

    companion object
}

// The fallback Jna cleaner, which is available for both Android, and the JVM.
private class UniffiJnaCleaner : UniffiCleaner {
    private val cleaner = com.sun.jna.internal.Cleaner.getCleaner()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        UniffiJnaCleanable(cleaner.register(value, cleanUpTask))
}

private class UniffiJnaCleanable(
    private val cleanable: com.sun.jna.internal.Cleaner.Cleanable,
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}


// We decide at uniffi binding generation time whether we were
// using Android or not.
// There are further runtime checks to chose the correct implementation
// of the cleaner.
private fun UniffiCleaner.Companion.create(): UniffiCleaner =
    try {
        // For safety's sake: if the library hasn't been run in android_cleaner = true
        // mode, but is being run on Android, then we still need to think about
        // Android API versions.
        // So we check if java.lang.ref.Cleaner is there, and use that…
        java.lang.Class.forName("java.lang.ref.Cleaner")
        JavaLangRefCleaner()
    } catch (e: ClassNotFoundException) {
        // … otherwise, fallback to the JNA cleaner.
        UniffiJnaCleaner()
    }

private class JavaLangRefCleaner : UniffiCleaner {
    val cleaner = java.lang.ref.Cleaner.create()

    override fun register(value: Any, cleanUpTask: Runnable): UniffiCleaner.Cleanable =
        JavaLangRefCleanable(cleaner.register(value, cleanUpTask))
}

private class JavaLangRefCleanable(
    val cleanable: java.lang.ref.Cleaner.Cleanable
) : UniffiCleaner.Cleanable {
    override fun clean() = cleanable.clean()
}

/**
 * @suppress
 */
public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

/**
 * @suppress
 */
public object FfiConverterByte: FfiConverter<Byte, Byte> {
    override fun lift(value: Byte): Byte {
        return value
    }

    override fun read(buf: ByteBuffer): Byte {
        return buf.get()
    }

    override fun lower(value: Byte): Byte {
        return value
    }

    override fun allocationSize(value: Byte) = 1UL

    override fun write(value: Byte, buf: ByteBuffer) {
        buf.put(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterUShort: FfiConverter<UShort, Short> {
    override fun lift(value: Short): UShort {
        return value.toUShort()
    }

    override fun read(buf: ByteBuffer): UShort {
        return lift(buf.getShort())
    }

    override fun lower(value: UShort): Short {
        return value.toShort()
    }

    override fun allocationSize(value: UShort) = 2UL

    override fun write(value: UShort, buf: ByteBuffer) {
        buf.putShort(value.toShort())
    }
}

/**
 * @suppress
 */
public object FfiConverterShort: FfiConverter<Short, Short> {
    override fun lift(value: Short): Short {
        return value
    }

    override fun read(buf: ByteBuffer): Short {
        return buf.getShort()
    }

    override fun lower(value: Short): Short {
        return value
    }

    override fun allocationSize(value: Short) = 2UL

    override fun write(value: Short, buf: ByteBuffer) {
        buf.putShort(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

/**
 * @suppress
 */
public object FfiConverterInt: FfiConverter<Int, Int> {
    override fun lift(value: Int): Int {
        return value
    }

    override fun read(buf: ByteBuffer): Int {
        return buf.getInt()
    }

    override fun lower(value: Int): Int {
        return value
    }

    override fun allocationSize(value: Int) = 4UL

    override fun write(value: Int, buf: ByteBuffer) {
        buf.putInt(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

/**
 * @suppress
 */
public object FfiConverterLong: FfiConverter<Long, Long> {
    override fun lift(value: Long): Long {
        return value
    }

    override fun read(buf: ByteBuffer): Long {
        return buf.getLong()
    }

    override fun lower(value: Long): Long {
        return value
    }

    override fun allocationSize(value: Long) = 8UL

    override fun write(value: Long, buf: ByteBuffer) {
        buf.putLong(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterDouble: FfiConverter<Double, Double> {
    override fun lift(value: Double): Double {
        return value
    }

    override fun read(buf: ByteBuffer): Double {
        return buf.getDouble()
    }

    override fun lower(value: Double): Double {
        return value
    }

    override fun allocationSize(value: Double) = 8UL

    override fun write(value: Double, buf: ByteBuffer) {
        buf.putDouble(value)
    }
}

/**
 * @suppress
 */
public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

/**
 * @suppress
 */
public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}


// This template implements a class for working with a Rust struct via a handle
// to the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// theq Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each instance holds an opaque handle to the underlying Rust struct.
//     Method calls need to read this handle from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an instance is no longer needed, its handle should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so risks
//     leaking the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
//   * To mitigate many of the risks of leaking memory and use-after-free unsafety, a `Cleaner`
//     is implemented to call the destructor when the Kotlin object becomes unreachable.
//     This is done in a background thread. This is not a panacea, and client code should be aware that
//      1. the thread may starve if some there are objects that have poorly performing
//     `drop` methods or do significant work in their `drop` methods.
//      2. the thread is shared across the whole library. This can be tuned by using `android_cleaner = true`,
//         or `android = true` in the [`kotlin` section of the `uniffi.toml` file](https://mozilla.github.io/uniffi-rs/kotlin/configuration.html).
//
// If we try to implement this with mutual exclusion on access to the handle, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the handle, but is interrupted
//      before it can pass the handle over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read handle value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each instance an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// This makes a cleaner a better alternative to _not_ calling `destroy()` as
// and when the object is finished with, but the abstraction is not perfect: if the Rust object's `drop`
// method is slow, and/or there are many objects to cleanup, and it's on a low end Android device, then the cleaner
// thread may be starved, and the app will leak memory.
//
// In this case, `destroy`ing manually may be a better solution.
//
// The cleaner can live side by side with the manual calling of `destroy`. In the order of responsiveness, uniffi objects
// with Rust peers are reclaimed:
//
// 1. By calling the `destroy` method of the object, which calls `rustObject.free()`. If that doesn't happen:
// 2. When the object becomes unreachable, AND the Cleaner thread gets to call `rustObject.free()`. If the thread is starved then:
// 3. The memory is reclaimed when the process terminates.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//


//
public interface ToriiClientInterface {
    
    fun `achievements`(`query`: AchievementQuery): PageAchievement
    
    fun `activities`(`query`: ActivityQuery): PageActivity
    
    fun `aggregations`(`query`: AggregationQuery): PageAggregationEntry
    
    fun `cancelSubscription`(`subscriptionId`: kotlin.ULong)
    
    fun `contracts`(`query`: ContractQuery): List<Contract>
    
    fun `controllers`(`query`: ControllerQuery): PageController
    
    fun `entities`(`query`: Query): PageEntity
    
    fun `eventMessages`(`query`: Query): PageEntity
    
    fun `playerAchievements`(`query`: PlayerAchievementQuery): PagePlayerAchievement
    
    fun `publishMessage`(`message`: Message): kotlin.String
    
    fun `publishMessageBatch`(`messages`: List<Message>): List<kotlin.String>
    
    fun `sql`(`query`: kotlin.String): List<SqlRow>
    
    fun `starknetEvents`(`query`: EventQuery): PageEvent
    
    fun `subscribeEntityUpdates`(`clause`: Clause?, `worldAddresses`: List<FieldElement>, `callback`: EntityUpdateCallback): kotlin.ULong
    
    fun `subscribeEventUpdates`(`keys`: List<KeysClause>, `callback`: EventUpdateCallback): kotlin.ULong
    
    fun `subscribeTokenBalanceUpdates`(`contractAddresses`: List<FieldElement>, `accountAddresses`: List<FieldElement>, `tokenIds`: List<U256>, `callback`: TokenBalanceUpdateCallback): kotlin.ULong
    
    fun `subscribeTokenUpdates`(`contractAddresses`: List<FieldElement>, `tokenIds`: List<U256>, `callback`: TokenUpdateCallback): kotlin.ULong
    
    fun `subscribeTransactionUpdates`(`filter`: TransactionFilter?, `callback`: TransactionUpdateCallback): kotlin.ULong
    
    fun `tokenBalances`(`query`: TokenBalanceQuery): PageTokenBalance
    
    fun `tokenContracts`(`query`: TokenContractQuery): PageTokenContract
    
    fun `tokenTransfers`(`query`: TokenTransferQuery): PageTokenTransfer
    
    fun `tokens`(`query`: TokenQuery): PageToken
    
    fun `transactions`(`query`: TransactionQuery): PageTransaction
    
    fun `worlds`(`worldAddresses`: List<FieldElement>): List<World>
    
    companion object
}

open class ToriiClient: Disposable, AutoCloseable, ToriiClientInterface
{

    @Suppress("UNUSED_PARAMETER")
    /**
     * @suppress
     */
    constructor(withHandle: UniffiWithHandle, handle: Long) {
        this.handle = handle
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }

    /**
     * @suppress
     *
     * This constructor can be used to instantiate a fake object. Only used for tests. Any
     * attempt to actually use an object constructed this way will fail as there is no
     * connected Rust object.
     */
    @Suppress("UNUSED_PARAMETER")
    constructor(noHandle: NoHandle) {
        this.handle = 0
        this.cleanable = UniffiLib.CLEANER.register(this, UniffiCleanAction(handle))
    }
    constructor(`toriiUrl`: kotlin.String) :
        this(UniffiWithHandle, 
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_constructor_toriiclient_new(
    
        FfiConverterString.lower(`toriiUrl`),_status)
}
    )

    protected val handle: Long
    protected val cleanable: UniffiCleaner.Cleanable

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithHandle(block: (handle: Long) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the handle being freed concurrently.
        try {
            return block(this.uniffiCloneHandle())
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                cleanable.clean()
            }
        }
    }

    // Use a static inner class instead of a closure so as not to accidentally
    // capture `this` as part of the cleanable's action.
    private class UniffiCleanAction(private val handle: Long) : Runnable {
        override fun run() {
            if (handle == 0.toLong()) {
                // Fake object created with `NoHandle`, don't try to free.
                return;
            }
            uniffiRustCall { status ->
                UniffiLib.uniffi_dojo_uniffi_fn_free_toriiclient(handle, status)
            }
        }
    }

    /**
     * @suppress
     */
    fun uniffiCloneHandle(): Long {
        if (handle == 0.toLong()) {
            throw InternalException("uniffiCloneHandle() called on NoHandle object");
        }
        return uniffiRustCall() { status ->
            UniffiLib.uniffi_dojo_uniffi_fn_clone_toriiclient(handle, status)
        }
    }

    
    @Throws(DojoException::class)override fun `achievements`(`query`: AchievementQuery): PageAchievement {
            return FfiConverterTypePageAchievement.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_achievements(
        it,
        FfiConverterTypeAchievementQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `activities`(`query`: ActivityQuery): PageActivity {
            return FfiConverterTypePageActivity.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_activities(
        it,
        FfiConverterTypeActivityQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `aggregations`(`query`: AggregationQuery): PageAggregationEntry {
            return FfiConverterTypePageAggregationEntry.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(
        it,
        FfiConverterTypeAggregationQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `cancelSubscription`(`subscriptionId`: kotlin.ULong)
        = 
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(
        it,
        FfiConverterULong.lower(`subscriptionId`),_status)
}
    }
    
    

    
    @Throws(DojoException::class)override fun `contracts`(`query`: ContractQuery): List<Contract> {
            return FfiConverterSequenceTypeContract.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_contracts(
        it,
        FfiConverterTypeContractQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `controllers`(`query`: ControllerQuery): PageController {
            return FfiConverterTypePageController.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_controllers(
        it,
        FfiConverterTypeControllerQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `entities`(`query`: Query): PageEntity {
            return FfiConverterTypePageEntity.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_entities(
        it,
        FfiConverterTypeQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `eventMessages`(`query`: Query): PageEntity {
            return FfiConverterTypePageEntity.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(
        it,
        FfiConverterTypeQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `playerAchievements`(`query`: PlayerAchievementQuery): PagePlayerAchievement {
            return FfiConverterTypePagePlayerAchievement.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(
        it,
        FfiConverterTypePlayerAchievementQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `publishMessage`(`message`: Message): kotlin.String {
            return FfiConverterString.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(
        it,
        FfiConverterTypeMessage.lower(`message`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `publishMessageBatch`(`messages`: List<Message>): List<kotlin.String> {
            return FfiConverterSequenceString.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(
        it,
        FfiConverterSequenceTypeMessage.lower(`messages`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `sql`(`query`: kotlin.String): List<SqlRow> {
            return FfiConverterSequenceTypeSqlRow.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_sql(
        it,
        FfiConverterString.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `starknetEvents`(`query`: EventQuery): PageEvent {
            return FfiConverterTypePageEvent.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(
        it,
        FfiConverterTypeEventQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `subscribeEntityUpdates`(`clause`: Clause?, `worldAddresses`: List<FieldElement>, `callback`: EntityUpdateCallback): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(
        it,
        FfiConverterOptionalTypeClause.lower(`clause`),FfiConverterSequenceTypeFieldElement.lower(`worldAddresses`),FfiConverterTypeEntityUpdateCallback.lower(`callback`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `subscribeEventUpdates`(`keys`: List<KeysClause>, `callback`: EventUpdateCallback): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(
        it,
        FfiConverterSequenceTypeKeysClause.lower(`keys`),FfiConverterTypeEventUpdateCallback.lower(`callback`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `subscribeTokenBalanceUpdates`(`contractAddresses`: List<FieldElement>, `accountAddresses`: List<FieldElement>, `tokenIds`: List<U256>, `callback`: TokenBalanceUpdateCallback): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(
        it,
        FfiConverterSequenceTypeFieldElement.lower(`contractAddresses`),FfiConverterSequenceTypeFieldElement.lower(`accountAddresses`),FfiConverterSequenceTypeU256.lower(`tokenIds`),FfiConverterTypeTokenBalanceUpdateCallback.lower(`callback`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `subscribeTokenUpdates`(`contractAddresses`: List<FieldElement>, `tokenIds`: List<U256>, `callback`: TokenUpdateCallback): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(
        it,
        FfiConverterSequenceTypeFieldElement.lower(`contractAddresses`),FfiConverterSequenceTypeU256.lower(`tokenIds`),FfiConverterTypeTokenUpdateCallback.lower(`callback`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `subscribeTransactionUpdates`(`filter`: TransactionFilter?, `callback`: TransactionUpdateCallback): kotlin.ULong {
            return FfiConverterULong.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(
        it,
        FfiConverterOptionalTypeTransactionFilter.lower(`filter`),FfiConverterTypeTransactionUpdateCallback.lower(`callback`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `tokenBalances`(`query`: TokenBalanceQuery): PageTokenBalance {
            return FfiConverterTypePageTokenBalance.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(
        it,
        FfiConverterTypeTokenBalanceQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `tokenContracts`(`query`: TokenContractQuery): PageTokenContract {
            return FfiConverterTypePageTokenContract.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(
        it,
        FfiConverterTypeTokenContractQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `tokenTransfers`(`query`: TokenTransferQuery): PageTokenTransfer {
            return FfiConverterTypePageTokenTransfer.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(
        it,
        FfiConverterTypeTokenTransferQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `tokens`(`query`: TokenQuery): PageToken {
            return FfiConverterTypePageToken.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_tokens(
        it,
        FfiConverterTypeTokenQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `transactions`(`query`: TransactionQuery): PageTransaction {
            return FfiConverterTypePageTransaction.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_transactions(
        it,
        FfiConverterTypeTransactionQuery.lower(`query`),_status)
}
    }
    )
    }
    

    
    @Throws(DojoException::class)override fun `worlds`(`worldAddresses`: List<FieldElement>): List<World> {
            return FfiConverterSequenceTypeWorld.lift(
    callWithHandle {
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_method_toriiclient_worlds(
        it,
        FfiConverterSequenceTypeFieldElement.lower(`worldAddresses`),_status)
}
    }
    )
    }
    

    

    


    
    companion object {
        
    @Throws(DojoException::class) fun `newWithConfig`(`toriiUrl`: kotlin.String, `maxMessageSize`: kotlin.ULong): ToriiClient {
            return FfiConverterTypeToriiClient.lift(
    uniffiRustCallWithError(DojoException) { _status ->
    UniffiLib.uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(
    
        FfiConverterString.lower(`toriiUrl`),FfiConverterULong.lower(`maxMessageSize`),_status)
}
    )
    }
    

        
    }
    
}


/**
 * @suppress
 */
public object FfiConverterTypeToriiClient: FfiConverter<ToriiClient, Long> {
    override fun lower(value: ToriiClient): Long {
        return value.uniffiCloneHandle()
    }

    override fun lift(value: Long): ToriiClient {
        return ToriiClient(UniffiWithHandle, value)
    }

    override fun read(buf: ByteBuffer): ToriiClient {
        return lift(buf.getLong())
    }

    override fun allocationSize(value: ToriiClient) = 8UL

    override fun write(value: ToriiClient, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}



data class Achievement (
    val `id`: kotlin.String
    , 
    val `worldAddress`: FieldElement
    , 
    val `namespace`: kotlin.String
    , 
    val `entityId`: kotlin.String
    , 
    val `hidden`: kotlin.Boolean
    , 
    val `index`: kotlin.UInt
    , 
    val `points`: kotlin.UInt
    , 
    val `start`: kotlin.String
    , 
    val `end`: kotlin.String
    , 
    val `group`: kotlin.String
    , 
    val `icon`: kotlin.String
    , 
    val `title`: kotlin.String
    , 
    val `description`: kotlin.String
    , 
    val `tasks`: List<AchievementTask>
    , 
    val `data`: kotlin.String?
    , 
    val `totalCompletions`: kotlin.UInt
    , 
    val `completionRate`: kotlin.Double
    , 
    val `createdAt`: kotlin.ULong
    , 
    val `updatedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAchievement: FfiConverterRustBuffer<Achievement> {
    override fun read(buf: ByteBuffer): Achievement {
        return Achievement(
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeAchievementTask.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: Achievement) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterString.allocationSize(value.`namespace`) +
            FfiConverterString.allocationSize(value.`entityId`) +
            FfiConverterBoolean.allocationSize(value.`hidden`) +
            FfiConverterUInt.allocationSize(value.`index`) +
            FfiConverterUInt.allocationSize(value.`points`) +
            FfiConverterString.allocationSize(value.`start`) +
            FfiConverterString.allocationSize(value.`end`) +
            FfiConverterString.allocationSize(value.`group`) +
            FfiConverterString.allocationSize(value.`icon`) +
            FfiConverterString.allocationSize(value.`title`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterSequenceTypeAchievementTask.allocationSize(value.`tasks`) +
            FfiConverterOptionalString.allocationSize(value.`data`) +
            FfiConverterUInt.allocationSize(value.`totalCompletions`) +
            FfiConverterDouble.allocationSize(value.`completionRate`) +
            FfiConverterULong.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: Achievement, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterString.write(value.`namespace`, buf)
            FfiConverterString.write(value.`entityId`, buf)
            FfiConverterBoolean.write(value.`hidden`, buf)
            FfiConverterUInt.write(value.`index`, buf)
            FfiConverterUInt.write(value.`points`, buf)
            FfiConverterString.write(value.`start`, buf)
            FfiConverterString.write(value.`end`, buf)
            FfiConverterString.write(value.`group`, buf)
            FfiConverterString.write(value.`icon`, buf)
            FfiConverterString.write(value.`title`, buf)
            FfiConverterString.write(value.`description`, buf)
            FfiConverterSequenceTypeAchievementTask.write(value.`tasks`, buf)
            FfiConverterOptionalString.write(value.`data`, buf)
            FfiConverterUInt.write(value.`totalCompletions`, buf)
            FfiConverterDouble.write(value.`completionRate`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
    }
}



data class AchievementProgression (
    val `id`: kotlin.String
    , 
    val `achievementId`: kotlin.String
    , 
    val `taskId`: kotlin.String
    , 
    val `worldAddress`: FieldElement
    , 
    val `namespace`: kotlin.String
    , 
    val `playerId`: FieldElement
    , 
    val `count`: kotlin.UInt
    , 
    val `completed`: kotlin.Boolean
    , 
    val `completedAt`: kotlin.ULong?
    , 
    val `createdAt`: kotlin.ULong
    , 
    val `updatedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAchievementProgression: FfiConverterRustBuffer<AchievementProgression> {
    override fun read(buf: ByteBuffer): AchievementProgression {
        return AchievementProgression(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: AchievementProgression) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`achievementId`) +
            FfiConverterString.allocationSize(value.`taskId`) +
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterString.allocationSize(value.`namespace`) +
            FfiConverterTypeFieldElement.allocationSize(value.`playerId`) +
            FfiConverterUInt.allocationSize(value.`count`) +
            FfiConverterBoolean.allocationSize(value.`completed`) +
            FfiConverterOptionalULong.allocationSize(value.`completedAt`) +
            FfiConverterULong.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: AchievementProgression, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`achievementId`, buf)
            FfiConverterString.write(value.`taskId`, buf)
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterString.write(value.`namespace`, buf)
            FfiConverterTypeFieldElement.write(value.`playerId`, buf)
            FfiConverterUInt.write(value.`count`, buf)
            FfiConverterBoolean.write(value.`completed`, buf)
            FfiConverterOptionalULong.write(value.`completedAt`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
    }
}



data class AchievementQuery (
    val `worldAddresses`: List<FieldElement>
    , 
    val `namespaces`: List<kotlin.String>
    , 
    val `hidden`: kotlin.Boolean?
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAchievementQuery: FfiConverterRustBuffer<AchievementQuery> {
    override fun read(buf: ByteBuffer): AchievementQuery {
        return AchievementQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterOptionalBoolean.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: AchievementQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`worldAddresses`) +
            FfiConverterSequenceString.allocationSize(value.`namespaces`) +
            FfiConverterOptionalBoolean.allocationSize(value.`hidden`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: AchievementQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`worldAddresses`, buf)
            FfiConverterSequenceString.write(value.`namespaces`, buf)
            FfiConverterOptionalBoolean.write(value.`hidden`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class AchievementTask (
    val `taskId`: kotlin.String
    , 
    val `description`: kotlin.String
    , 
    val `total`: kotlin.UInt
    , 
    val `totalCompletions`: kotlin.UInt
    , 
    val `completionRate`: kotlin.Double
    , 
    val `createdAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAchievementTask: FfiConverterRustBuffer<AchievementTask> {
    override fun read(buf: ByteBuffer): AchievementTask {
        return AchievementTask(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: AchievementTask) = (
            FfiConverterString.allocationSize(value.`taskId`) +
            FfiConverterString.allocationSize(value.`description`) +
            FfiConverterUInt.allocationSize(value.`total`) +
            FfiConverterUInt.allocationSize(value.`totalCompletions`) +
            FfiConverterDouble.allocationSize(value.`completionRate`) +
            FfiConverterULong.allocationSize(value.`createdAt`)
    )

    override fun write(value: AchievementTask, buf: ByteBuffer) {
            FfiConverterString.write(value.`taskId`, buf)
            FfiConverterString.write(value.`description`, buf)
            FfiConverterUInt.write(value.`total`, buf)
            FfiConverterUInt.write(value.`totalCompletions`, buf)
            FfiConverterDouble.write(value.`completionRate`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
    }
}



data class ActionCount (
    val `actionName`: kotlin.String
    , 
    val `count`: kotlin.UInt
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeActionCount: FfiConverterRustBuffer<ActionCount> {
    override fun read(buf: ByteBuffer): ActionCount {
        return ActionCount(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ActionCount) = (
            FfiConverterString.allocationSize(value.`actionName`) +
            FfiConverterUInt.allocationSize(value.`count`)
    )

    override fun write(value: ActionCount, buf: ByteBuffer) {
            FfiConverterString.write(value.`actionName`, buf)
            FfiConverterUInt.write(value.`count`, buf)
    }
}



data class Activity (
    val `id`: kotlin.String
    , 
    val `worldAddress`: FieldElement
    , 
    val `namespace`: kotlin.String
    , 
    val `callerAddress`: FieldElement
    , 
    val `sessionStart`: kotlin.ULong
    , 
    val `sessionEnd`: kotlin.ULong
    , 
    val `actionCount`: kotlin.UInt
    , 
    val `actions`: List<ActionCount>
    , 
    val `updatedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeActivity: FfiConverterRustBuffer<Activity> {
    override fun read(buf: ByteBuffer): Activity {
        return Activity(
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeActionCount.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: Activity) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterString.allocationSize(value.`namespace`) +
            FfiConverterTypeFieldElement.allocationSize(value.`callerAddress`) +
            FfiConverterULong.allocationSize(value.`sessionStart`) +
            FfiConverterULong.allocationSize(value.`sessionEnd`) +
            FfiConverterUInt.allocationSize(value.`actionCount`) +
            FfiConverterSequenceTypeActionCount.allocationSize(value.`actions`) +
            FfiConverterULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: Activity, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterString.write(value.`namespace`, buf)
            FfiConverterTypeFieldElement.write(value.`callerAddress`, buf)
            FfiConverterULong.write(value.`sessionStart`, buf)
            FfiConverterULong.write(value.`sessionEnd`, buf)
            FfiConverterUInt.write(value.`actionCount`, buf)
            FfiConverterSequenceTypeActionCount.write(value.`actions`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
    }
}



data class ActivityQuery (
    val `worldAddresses`: List<FieldElement>
    , 
    val `namespaces`: List<kotlin.String>
    , 
    val `callerAddresses`: List<FieldElement>
    , 
    val `fromTime`: kotlin.ULong?
    , 
    val `toTime`: kotlin.ULong?
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeActivityQuery: FfiConverterRustBuffer<ActivityQuery> {
    override fun read(buf: ByteBuffer): ActivityQuery {
        return ActivityQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: ActivityQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`worldAddresses`) +
            FfiConverterSequenceString.allocationSize(value.`namespaces`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`callerAddresses`) +
            FfiConverterOptionalULong.allocationSize(value.`fromTime`) +
            FfiConverterOptionalULong.allocationSize(value.`toTime`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: ActivityQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`worldAddresses`, buf)
            FfiConverterSequenceString.write(value.`namespaces`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`callerAddresses`, buf)
            FfiConverterOptionalULong.write(value.`fromTime`, buf)
            FfiConverterOptionalULong.write(value.`toTime`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class AggregationEntry (
    val `id`: kotlin.String
    , 
    val `aggregatorId`: kotlin.String
    , 
    val `entityId`: kotlin.String
    , 
    val `value`: U256
    , 
    val `displayValue`: kotlin.String
    , 
    val `position`: kotlin.ULong
    , 
    val `modelId`: kotlin.String
    , 
    val `createdAt`: kotlin.ULong
    , 
    val `updatedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAggregationEntry: FfiConverterRustBuffer<AggregationEntry> {
    override fun read(buf: ByteBuffer): AggregationEntry {
        return AggregationEntry(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeU256.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: AggregationEntry) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterString.allocationSize(value.`aggregatorId`) +
            FfiConverterString.allocationSize(value.`entityId`) +
            FfiConverterTypeU256.allocationSize(value.`value`) +
            FfiConverterString.allocationSize(value.`displayValue`) +
            FfiConverterULong.allocationSize(value.`position`) +
            FfiConverterString.allocationSize(value.`modelId`) +
            FfiConverterULong.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: AggregationEntry, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterString.write(value.`aggregatorId`, buf)
            FfiConverterString.write(value.`entityId`, buf)
            FfiConverterTypeU256.write(value.`value`, buf)
            FfiConverterString.write(value.`displayValue`, buf)
            FfiConverterULong.write(value.`position`, buf)
            FfiConverterString.write(value.`modelId`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
    }
}



data class AggregationQuery (
    val `aggregatorIds`: List<kotlin.String>
    , 
    val `entityIds`: List<kotlin.String>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAggregationQuery: FfiConverterRustBuffer<AggregationQuery> {
    override fun read(buf: ByteBuffer): AggregationQuery {
        return AggregationQuery(
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: AggregationQuery) = (
            FfiConverterSequenceString.allocationSize(value.`aggregatorIds`) +
            FfiConverterSequenceString.allocationSize(value.`entityIds`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: AggregationQuery, buf: ByteBuffer) {
            FfiConverterSequenceString.write(value.`aggregatorIds`, buf)
            FfiConverterSequenceString.write(value.`entityIds`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class AttributeFilter (
    val `traitName`: kotlin.String
    , 
    val `traitValue`: kotlin.String
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeAttributeFilter: FfiConverterRustBuffer<AttributeFilter> {
    override fun read(buf: ByteBuffer): AttributeFilter {
        return AttributeFilter(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AttributeFilter) = (
            FfiConverterString.allocationSize(value.`traitName`) +
            FfiConverterString.allocationSize(value.`traitValue`)
    )

    override fun write(value: AttributeFilter, buf: ByteBuffer) {
            FfiConverterString.write(value.`traitName`, buf)
            FfiConverterString.write(value.`traitValue`, buf)
    }
}



data class CompositeClause (
    val `operator`: LogicalOperator
    , 
    val `clauses`: List<Clause>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeCompositeClause: FfiConverterRustBuffer<CompositeClause> {
    override fun read(buf: ByteBuffer): CompositeClause {
        return CompositeClause(
            FfiConverterTypeLogicalOperator.read(buf),
            FfiConverterSequenceTypeClause.read(buf),
        )
    }

    override fun allocationSize(value: CompositeClause) = (
            FfiConverterTypeLogicalOperator.allocationSize(value.`operator`) +
            FfiConverterSequenceTypeClause.allocationSize(value.`clauses`)
    )

    override fun write(value: CompositeClause, buf: ByteBuffer) {
            FfiConverterTypeLogicalOperator.write(value.`operator`, buf)
            FfiConverterSequenceTypeClause.write(value.`clauses`, buf)
    }
}



data class Contract (
    val `contractAddress`: FieldElement
    , 
    val `contractType`: ContractType
    , 
    val `head`: kotlin.ULong?
    , 
    val `tps`: kotlin.ULong?
    , 
    val `lastBlockTimestamp`: kotlin.ULong?
    , 
    val `lastPendingBlockTx`: FieldElement?
    , 
    val `updatedAt`: kotlin.ULong
    , 
    val `createdAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeContract: FfiConverterRustBuffer<Contract> {
    override fun read(buf: ByteBuffer): Contract {
        return Contract(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeContractType.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalTypeFieldElement.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: Contract) = (
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterTypeContractType.allocationSize(value.`contractType`) +
            FfiConverterOptionalULong.allocationSize(value.`head`) +
            FfiConverterOptionalULong.allocationSize(value.`tps`) +
            FfiConverterOptionalULong.allocationSize(value.`lastBlockTimestamp`) +
            FfiConverterOptionalTypeFieldElement.allocationSize(value.`lastPendingBlockTx`) +
            FfiConverterULong.allocationSize(value.`updatedAt`) +
            FfiConverterULong.allocationSize(value.`createdAt`)
    )

    override fun write(value: Contract, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterTypeContractType.write(value.`contractType`, buf)
            FfiConverterOptionalULong.write(value.`head`, buf)
            FfiConverterOptionalULong.write(value.`tps`, buf)
            FfiConverterOptionalULong.write(value.`lastBlockTimestamp`, buf)
            FfiConverterOptionalTypeFieldElement.write(value.`lastPendingBlockTx`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
    }
}



data class ContractQuery (
    val `contractAddresses`: List<FieldElement>
    , 
    val `contractTypes`: List<ContractType>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeContractQuery: FfiConverterRustBuffer<ContractQuery> {
    override fun read(buf: ByteBuffer): ContractQuery {
        return ContractQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeContractType.read(buf),
        )
    }

    override fun allocationSize(value: ContractQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceTypeContractType.allocationSize(value.`contractTypes`)
    )

    override fun write(value: ContractQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceTypeContractType.write(value.`contractTypes`, buf)
    }
}



data class Controller (
    val `address`: FieldElement
    , 
    val `username`: kotlin.String
    , 
    val `deployedAtTimestamp`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeController: FfiConverterRustBuffer<Controller> {
    override fun read(buf: ByteBuffer): Controller {
        return Controller(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: Controller) = (
            FfiConverterTypeFieldElement.allocationSize(value.`address`) +
            FfiConverterString.allocationSize(value.`username`) +
            FfiConverterULong.allocationSize(value.`deployedAtTimestamp`)
    )

    override fun write(value: Controller, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`address`, buf)
            FfiConverterString.write(value.`username`, buf)
            FfiConverterULong.write(value.`deployedAtTimestamp`, buf)
    }
}



data class ControllerQuery (
    val `pagination`: Pagination
    , 
    val `contractAddresses`: List<FieldElement>
    , 
    val `usernames`: List<kotlin.String>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeControllerQuery: FfiConverterRustBuffer<ControllerQuery> {
    override fun read(buf: ByteBuffer): ControllerQuery {
        return ControllerQuery(
            FfiConverterTypePagination.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: ControllerQuery) = (
            FfiConverterTypePagination.allocationSize(value.`pagination`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceString.allocationSize(value.`usernames`)
    )

    override fun write(value: ControllerQuery, buf: ByteBuffer) {
            FfiConverterTypePagination.write(value.`pagination`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceString.write(value.`usernames`, buf)
    }
}



data class Entity (
    val `worldAddress`: FieldElement
    , 
    val `hashedKeys`: FieldElement
    , 
    val `models`: List<Struct>
    , 
    val `createdAt`: kotlin.ULong
    , 
    val `updatedAt`: kotlin.ULong
    , 
    val `executedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEntity: FfiConverterRustBuffer<Entity> {
    override fun read(buf: ByteBuffer): Entity {
        return Entity(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterSequenceTypeStruct.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: Entity) = (
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterTypeFieldElement.allocationSize(value.`hashedKeys`) +
            FfiConverterSequenceTypeStruct.allocationSize(value.`models`) +
            FfiConverterULong.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`updatedAt`) +
            FfiConverterULong.allocationSize(value.`executedAt`)
    )

    override fun write(value: Entity, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterTypeFieldElement.write(value.`hashedKeys`, buf)
            FfiConverterSequenceTypeStruct.write(value.`models`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
            FfiConverterULong.write(value.`executedAt`, buf)
    }
}



data class EnumOption (
    val `name`: kotlin.String
    , 
    val `ty`: Ty
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEnumOption: FfiConverterRustBuffer<EnumOption> {
    override fun read(buf: ByteBuffer): EnumOption {
        return EnumOption(
            FfiConverterString.read(buf),
            FfiConverterTypeTy.read(buf),
        )
    }

    override fun allocationSize(value: EnumOption) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterTypeTy.allocationSize(value.`ty`)
    )

    override fun write(value: EnumOption, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterTypeTy.write(value.`ty`, buf)
    }
}



data class EnumType (
    val `name`: kotlin.String
    , 
    val `option`: kotlin.UByte
    , 
    val `options`: List<EnumOption>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEnumType: FfiConverterRustBuffer<EnumType> {
    override fun read(buf: ByteBuffer): EnumType {
        return EnumType(
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterSequenceTypeEnumOption.read(buf),
        )
    }

    override fun allocationSize(value: EnumType) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterUByte.allocationSize(value.`option`) +
            FfiConverterSequenceTypeEnumOption.allocationSize(value.`options`)
    )

    override fun write(value: EnumType, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterUByte.write(value.`option`, buf)
            FfiConverterSequenceTypeEnumOption.write(value.`options`, buf)
    }
}



data class Event (
    val `keys`: List<FieldElement>
    , 
    val `data`: List<FieldElement>
    , 
    val `transactionHash`: FieldElement
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEvent: FfiConverterRustBuffer<Event> {
    override fun read(buf: ByteBuffer): Event {
        return Event(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
        )
    }

    override fun allocationSize(value: Event) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`keys`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`data`) +
            FfiConverterTypeFieldElement.allocationSize(value.`transactionHash`)
    )

    override fun write(value: Event, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`keys`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`data`, buf)
            FfiConverterTypeFieldElement.write(value.`transactionHash`, buf)
    }
}



data class EventQuery (
    val `keys`: KeysClause?
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeEventQuery: FfiConverterRustBuffer<EventQuery> {
    override fun read(buf: ByteBuffer): EventQuery {
        return EventQuery(
            FfiConverterOptionalTypeKeysClause.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: EventQuery) = (
            FfiConverterOptionalTypeKeysClause.allocationSize(value.`keys`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: EventQuery, buf: ByteBuffer) {
            FfiConverterOptionalTypeKeysClause.write(value.`keys`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class FixedSizeArray (
    val `array`: List<Ty>
    , 
    val `size`: kotlin.UInt
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeFixedSizeArray: FfiConverterRustBuffer<FixedSizeArray> {
    override fun read(buf: ByteBuffer): FixedSizeArray {
        return FixedSizeArray(
            FfiConverterSequenceTypeTy.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: FixedSizeArray) = (
            FfiConverterSequenceTypeTy.allocationSize(value.`array`) +
            FfiConverterUInt.allocationSize(value.`size`)
    )

    override fun write(value: FixedSizeArray, buf: ByteBuffer) {
            FfiConverterSequenceTypeTy.write(value.`array`, buf)
            FfiConverterUInt.write(value.`size`, buf)
    }
}



data class KeysClause (
    val `keys`: List<FieldElement?>
    , 
    val `patternMatching`: PatternMatching
    , 
    val `models`: List<kotlin.String>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeKeysClause: FfiConverterRustBuffer<KeysClause> {
    override fun read(buf: ByteBuffer): KeysClause {
        return KeysClause(
            FfiConverterSequenceOptionalTypeFieldElement.read(buf),
            FfiConverterTypePatternMatching.read(buf),
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: KeysClause) = (
            FfiConverterSequenceOptionalTypeFieldElement.allocationSize(value.`keys`) +
            FfiConverterTypePatternMatching.allocationSize(value.`patternMatching`) +
            FfiConverterSequenceString.allocationSize(value.`models`)
    )

    override fun write(value: KeysClause, buf: ByteBuffer) {
            FfiConverterSequenceOptionalTypeFieldElement.write(value.`keys`, buf)
            FfiConverterTypePatternMatching.write(value.`patternMatching`, buf)
            FfiConverterSequenceString.write(value.`models`, buf)
    }
}



data class Member (
    val `name`: kotlin.String
    , 
    val `ty`: Ty
    , 
    val `key`: kotlin.Boolean
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMember: FfiConverterRustBuffer<Member> {
    override fun read(buf: ByteBuffer): Member {
        return Member(
            FfiConverterString.read(buf),
            FfiConverterTypeTy.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Member) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterTypeTy.allocationSize(value.`ty`) +
            FfiConverterBoolean.allocationSize(value.`key`)
    )

    override fun write(value: Member, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterTypeTy.write(value.`ty`, buf)
            FfiConverterBoolean.write(value.`key`, buf)
    }
}



data class MemberClause (
    val `model`: kotlin.String
    , 
    val `member`: kotlin.String
    , 
    val `operator`: ComparisonOperator
    , 
    val `value`: MemberValue
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMemberClause: FfiConverterRustBuffer<MemberClause> {
    override fun read(buf: ByteBuffer): MemberClause {
        return MemberClause(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeComparisonOperator.read(buf),
            FfiConverterTypeMemberValue.read(buf),
        )
    }

    override fun allocationSize(value: MemberClause) = (
            FfiConverterString.allocationSize(value.`model`) +
            FfiConverterString.allocationSize(value.`member`) +
            FfiConverterTypeComparisonOperator.allocationSize(value.`operator`) +
            FfiConverterTypeMemberValue.allocationSize(value.`value`)
    )

    override fun write(value: MemberClause, buf: ByteBuffer) {
            FfiConverterString.write(value.`model`, buf)
            FfiConverterString.write(value.`member`, buf)
            FfiConverterTypeComparisonOperator.write(value.`operator`, buf)
            FfiConverterTypeMemberValue.write(value.`value`, buf)
    }
}



data class Message (
    val `message`: kotlin.String
    , 
    val `signature`: List<FieldElement>
    , 
    val `worldAddress`: FieldElement
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMessage: FfiConverterRustBuffer<Message> {
    override fun read(buf: ByteBuffer): Message {
        return Message(
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
        )
    }

    override fun allocationSize(value: Message) = (
            FfiConverterString.allocationSize(value.`message`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`signature`) +
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`)
    )

    override fun write(value: Message, buf: ByteBuffer) {
            FfiConverterString.write(value.`message`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`signature`, buf)
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
    }
}



data class Model (
    val `worldAddress`: FieldElement
    , 
    val `schema`: Ty
    , 
    val `namespace`: kotlin.String
    , 
    val `name`: kotlin.String
    , 
    val `selector`: FieldElement
    , 
    val `packedSize`: kotlin.UInt
    , 
    val `unpackedSize`: kotlin.UInt
    , 
    val `classHash`: FieldElement
    , 
    val `contractAddress`: FieldElement
    , 
    val `layout`: kotlin.String
    , 
    val `useLegacyStore`: kotlin.Boolean
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeModel: FfiConverterRustBuffer<Model> {
    override fun read(buf: ByteBuffer): Model {
        return Model(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeTy.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Model) = (
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterTypeTy.allocationSize(value.`schema`) +
            FfiConverterString.allocationSize(value.`namespace`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterTypeFieldElement.allocationSize(value.`selector`) +
            FfiConverterUInt.allocationSize(value.`packedSize`) +
            FfiConverterUInt.allocationSize(value.`unpackedSize`) +
            FfiConverterTypeFieldElement.allocationSize(value.`classHash`) +
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterString.allocationSize(value.`layout`) +
            FfiConverterBoolean.allocationSize(value.`useLegacyStore`)
    )

    override fun write(value: Model, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterTypeTy.write(value.`schema`, buf)
            FfiConverterString.write(value.`namespace`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterTypeFieldElement.write(value.`selector`, buf)
            FfiConverterUInt.write(value.`packedSize`, buf)
            FfiConverterUInt.write(value.`unpackedSize`, buf)
            FfiConverterTypeFieldElement.write(value.`classHash`, buf)
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterString.write(value.`layout`, buf)
            FfiConverterBoolean.write(value.`useLegacyStore`, buf)
    }
}



data class OrderBy (
    val `field`: kotlin.String
    , 
    val `direction`: OrderDirection
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeOrderBy: FfiConverterRustBuffer<OrderBy> {
    override fun read(buf: ByteBuffer): OrderBy {
        return OrderBy(
            FfiConverterString.read(buf),
            FfiConverterTypeOrderDirection.read(buf),
        )
    }

    override fun allocationSize(value: OrderBy) = (
            FfiConverterString.allocationSize(value.`field`) +
            FfiConverterTypeOrderDirection.allocationSize(value.`direction`)
    )

    override fun write(value: OrderBy, buf: ByteBuffer) {
            FfiConverterString.write(value.`field`, buf)
            FfiConverterTypeOrderDirection.write(value.`direction`, buf)
    }
}



data class PageAchievement (
    val `items`: List<Achievement>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageAchievement: FfiConverterRustBuffer<PageAchievement> {
    override fun read(buf: ByteBuffer): PageAchievement {
        return PageAchievement(
            FfiConverterSequenceTypeAchievement.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageAchievement) = (
            FfiConverterSequenceTypeAchievement.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageAchievement, buf: ByteBuffer) {
            FfiConverterSequenceTypeAchievement.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageActivity (
    val `items`: List<Activity>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageActivity: FfiConverterRustBuffer<PageActivity> {
    override fun read(buf: ByteBuffer): PageActivity {
        return PageActivity(
            FfiConverterSequenceTypeActivity.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageActivity) = (
            FfiConverterSequenceTypeActivity.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageActivity, buf: ByteBuffer) {
            FfiConverterSequenceTypeActivity.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageAggregationEntry (
    val `items`: List<AggregationEntry>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageAggregationEntry: FfiConverterRustBuffer<PageAggregationEntry> {
    override fun read(buf: ByteBuffer): PageAggregationEntry {
        return PageAggregationEntry(
            FfiConverterSequenceTypeAggregationEntry.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageAggregationEntry) = (
            FfiConverterSequenceTypeAggregationEntry.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageAggregationEntry, buf: ByteBuffer) {
            FfiConverterSequenceTypeAggregationEntry.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageController (
    val `items`: List<Controller>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageController: FfiConverterRustBuffer<PageController> {
    override fun read(buf: ByteBuffer): PageController {
        return PageController(
            FfiConverterSequenceTypeController.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageController) = (
            FfiConverterSequenceTypeController.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageController, buf: ByteBuffer) {
            FfiConverterSequenceTypeController.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageEntity (
    val `items`: List<Entity>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageEntity: FfiConverterRustBuffer<PageEntity> {
    override fun read(buf: ByteBuffer): PageEntity {
        return PageEntity(
            FfiConverterSequenceTypeEntity.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageEntity) = (
            FfiConverterSequenceTypeEntity.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageEntity, buf: ByteBuffer) {
            FfiConverterSequenceTypeEntity.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageEvent (
    val `items`: List<Event>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageEvent: FfiConverterRustBuffer<PageEvent> {
    override fun read(buf: ByteBuffer): PageEvent {
        return PageEvent(
            FfiConverterSequenceTypeEvent.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageEvent) = (
            FfiConverterSequenceTypeEvent.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageEvent, buf: ByteBuffer) {
            FfiConverterSequenceTypeEvent.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PagePlayerAchievement (
    val `items`: List<PlayerAchievementEntry>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePagePlayerAchievement: FfiConverterRustBuffer<PagePlayerAchievement> {
    override fun read(buf: ByteBuffer): PagePlayerAchievement {
        return PagePlayerAchievement(
            FfiConverterSequenceTypePlayerAchievementEntry.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PagePlayerAchievement) = (
            FfiConverterSequenceTypePlayerAchievementEntry.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PagePlayerAchievement, buf: ByteBuffer) {
            FfiConverterSequenceTypePlayerAchievementEntry.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageToken (
    val `items`: List<Token>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageToken: FfiConverterRustBuffer<PageToken> {
    override fun read(buf: ByteBuffer): PageToken {
        return PageToken(
            FfiConverterSequenceTypeToken.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageToken) = (
            FfiConverterSequenceTypeToken.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageToken, buf: ByteBuffer) {
            FfiConverterSequenceTypeToken.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageTokenBalance (
    val `items`: List<TokenBalance>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageTokenBalance: FfiConverterRustBuffer<PageTokenBalance> {
    override fun read(buf: ByteBuffer): PageTokenBalance {
        return PageTokenBalance(
            FfiConverterSequenceTypeTokenBalance.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageTokenBalance) = (
            FfiConverterSequenceTypeTokenBalance.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageTokenBalance, buf: ByteBuffer) {
            FfiConverterSequenceTypeTokenBalance.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageTokenContract (
    val `items`: List<TokenContract>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageTokenContract: FfiConverterRustBuffer<PageTokenContract> {
    override fun read(buf: ByteBuffer): PageTokenContract {
        return PageTokenContract(
            FfiConverterSequenceTypeTokenContract.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageTokenContract) = (
            FfiConverterSequenceTypeTokenContract.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageTokenContract, buf: ByteBuffer) {
            FfiConverterSequenceTypeTokenContract.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageTokenTransfer (
    val `items`: List<TokenTransfer>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageTokenTransfer: FfiConverterRustBuffer<PageTokenTransfer> {
    override fun read(buf: ByteBuffer): PageTokenTransfer {
        return PageTokenTransfer(
            FfiConverterSequenceTypeTokenTransfer.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageTokenTransfer) = (
            FfiConverterSequenceTypeTokenTransfer.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageTokenTransfer, buf: ByteBuffer) {
            FfiConverterSequenceTypeTokenTransfer.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class PageTransaction (
    val `items`: List<Transaction>
    , 
    val `nextCursor`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePageTransaction: FfiConverterRustBuffer<PageTransaction> {
    override fun read(buf: ByteBuffer): PageTransaction {
        return PageTransaction(
            FfiConverterSequenceTypeTransaction.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: PageTransaction) = (
            FfiConverterSequenceTypeTransaction.allocationSize(value.`items`) +
            FfiConverterOptionalString.allocationSize(value.`nextCursor`)
    )

    override fun write(value: PageTransaction, buf: ByteBuffer) {
            FfiConverterSequenceTypeTransaction.write(value.`items`, buf)
            FfiConverterOptionalString.write(value.`nextCursor`, buf)
    }
}



data class Pagination (
    val `cursor`: kotlin.String?
    , 
    val `limit`: kotlin.UInt?
    , 
    val `direction`: PaginationDirection
    , 
    val `orderBy`: List<OrderBy>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePagination: FfiConverterRustBuffer<Pagination> {
    override fun read(buf: ByteBuffer): Pagination {
        return Pagination(
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterTypePaginationDirection.read(buf),
            FfiConverterSequenceTypeOrderBy.read(buf),
        )
    }

    override fun allocationSize(value: Pagination) = (
            FfiConverterOptionalString.allocationSize(value.`cursor`) +
            FfiConverterOptionalUInt.allocationSize(value.`limit`) +
            FfiConverterTypePaginationDirection.allocationSize(value.`direction`) +
            FfiConverterSequenceTypeOrderBy.allocationSize(value.`orderBy`)
    )

    override fun write(value: Pagination, buf: ByteBuffer) {
            FfiConverterOptionalString.write(value.`cursor`, buf)
            FfiConverterOptionalUInt.write(value.`limit`, buf)
            FfiConverterTypePaginationDirection.write(value.`direction`, buf)
            FfiConverterSequenceTypeOrderBy.write(value.`orderBy`, buf)
    }
}



data class PlayerAchievementEntry (
    val `playerAddress`: FieldElement
    , 
    val `stats`: PlayerAchievementStats
    , 
    val `achievements`: List<PlayerAchievementProgress>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePlayerAchievementEntry: FfiConverterRustBuffer<PlayerAchievementEntry> {
    override fun read(buf: ByteBuffer): PlayerAchievementEntry {
        return PlayerAchievementEntry(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypePlayerAchievementStats.read(buf),
            FfiConverterSequenceTypePlayerAchievementProgress.read(buf),
        )
    }

    override fun allocationSize(value: PlayerAchievementEntry) = (
            FfiConverterTypeFieldElement.allocationSize(value.`playerAddress`) +
            FfiConverterTypePlayerAchievementStats.allocationSize(value.`stats`) +
            FfiConverterSequenceTypePlayerAchievementProgress.allocationSize(value.`achievements`)
    )

    override fun write(value: PlayerAchievementEntry, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`playerAddress`, buf)
            FfiConverterTypePlayerAchievementStats.write(value.`stats`, buf)
            FfiConverterSequenceTypePlayerAchievementProgress.write(value.`achievements`, buf)
    }
}



data class PlayerAchievementProgress (
    val `achievement`: Achievement
    , 
    val `taskProgress`: List<TaskProgress>
    , 
    val `completed`: kotlin.Boolean
    , 
    val `progressPercentage`: kotlin.Double
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePlayerAchievementProgress: FfiConverterRustBuffer<PlayerAchievementProgress> {
    override fun read(buf: ByteBuffer): PlayerAchievementProgress {
        return PlayerAchievementProgress(
            FfiConverterTypeAchievement.read(buf),
            FfiConverterSequenceTypeTaskProgress.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterDouble.read(buf),
        )
    }

    override fun allocationSize(value: PlayerAchievementProgress) = (
            FfiConverterTypeAchievement.allocationSize(value.`achievement`) +
            FfiConverterSequenceTypeTaskProgress.allocationSize(value.`taskProgress`) +
            FfiConverterBoolean.allocationSize(value.`completed`) +
            FfiConverterDouble.allocationSize(value.`progressPercentage`)
    )

    override fun write(value: PlayerAchievementProgress, buf: ByteBuffer) {
            FfiConverterTypeAchievement.write(value.`achievement`, buf)
            FfiConverterSequenceTypeTaskProgress.write(value.`taskProgress`, buf)
            FfiConverterBoolean.write(value.`completed`, buf)
            FfiConverterDouble.write(value.`progressPercentage`, buf)
    }
}



data class PlayerAchievementQuery (
    val `worldAddresses`: List<FieldElement>
    , 
    val `namespaces`: List<kotlin.String>
    , 
    val `playerAddresses`: List<FieldElement>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePlayerAchievementQuery: FfiConverterRustBuffer<PlayerAchievementQuery> {
    override fun read(buf: ByteBuffer): PlayerAchievementQuery {
        return PlayerAchievementQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: PlayerAchievementQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`worldAddresses`) +
            FfiConverterSequenceString.allocationSize(value.`namespaces`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`playerAddresses`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: PlayerAchievementQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`worldAddresses`, buf)
            FfiConverterSequenceString.write(value.`namespaces`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`playerAddresses`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class PlayerAchievementStats (
    val `totalPoints`: kotlin.UInt
    , 
    val `completedAchievements`: kotlin.UInt
    , 
    val `totalAchievements`: kotlin.UInt
    , 
    val `completionPercentage`: kotlin.Double
    , 
    val `lastAchievementAt`: kotlin.ULong?
    , 
    val `createdAt`: kotlin.ULong
    , 
    val `updatedAt`: kotlin.ULong
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePlayerAchievementStats: FfiConverterRustBuffer<PlayerAchievementStats> {
    override fun read(buf: ByteBuffer): PlayerAchievementStats {
        return PlayerAchievementStats(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterDouble.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: PlayerAchievementStats) = (
            FfiConverterUInt.allocationSize(value.`totalPoints`) +
            FfiConverterUInt.allocationSize(value.`completedAchievements`) +
            FfiConverterUInt.allocationSize(value.`totalAchievements`) +
            FfiConverterDouble.allocationSize(value.`completionPercentage`) +
            FfiConverterOptionalULong.allocationSize(value.`lastAchievementAt`) +
            FfiConverterULong.allocationSize(value.`createdAt`) +
            FfiConverterULong.allocationSize(value.`updatedAt`)
    )

    override fun write(value: PlayerAchievementStats, buf: ByteBuffer) {
            FfiConverterUInt.write(value.`totalPoints`, buf)
            FfiConverterUInt.write(value.`completedAchievements`, buf)
            FfiConverterUInt.write(value.`totalAchievements`, buf)
            FfiConverterDouble.write(value.`completionPercentage`, buf)
            FfiConverterOptionalULong.write(value.`lastAchievementAt`, buf)
            FfiConverterULong.write(value.`createdAt`, buf)
            FfiConverterULong.write(value.`updatedAt`, buf)
    }
}



data class Query (
    val `worldAddresses`: List<FieldElement>
    , 
    val `pagination`: Pagination
    , 
    val `clause`: Clause?
    , 
    val `noHashedKeys`: kotlin.Boolean
    , 
    val `models`: List<kotlin.String>
    , 
    val `historical`: kotlin.Boolean
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeQuery: FfiConverterRustBuffer<Query> {
    override fun read(buf: ByteBuffer): Query {
        return Query(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypePagination.read(buf),
            FfiConverterOptionalTypeClause.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Query) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`worldAddresses`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`) +
            FfiConverterOptionalTypeClause.allocationSize(value.`clause`) +
            FfiConverterBoolean.allocationSize(value.`noHashedKeys`) +
            FfiConverterSequenceString.allocationSize(value.`models`) +
            FfiConverterBoolean.allocationSize(value.`historical`)
    )

    override fun write(value: Query, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`worldAddresses`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
            FfiConverterOptionalTypeClause.write(value.`clause`, buf)
            FfiConverterBoolean.write(value.`noHashedKeys`, buf)
            FfiConverterSequenceString.write(value.`models`, buf)
            FfiConverterBoolean.write(value.`historical`, buf)
    }
}



data class Signature (
    val `r`: FieldElement
    , 
    val `s`: FieldElement
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSignature: FfiConverterRustBuffer<Signature> {
    override fun read(buf: ByteBuffer): Signature {
        return Signature(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
        )
    }

    override fun allocationSize(value: Signature) = (
            FfiConverterTypeFieldElement.allocationSize(value.`r`) +
            FfiConverterTypeFieldElement.allocationSize(value.`s`)
    )

    override fun write(value: Signature, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`r`, buf)
            FfiConverterTypeFieldElement.write(value.`s`, buf)
    }
}



data class SqlField (
    val `name`: kotlin.String
    , 
    val `value`: SqlValue
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSqlField: FfiConverterRustBuffer<SqlField> {
    override fun read(buf: ByteBuffer): SqlField {
        return SqlField(
            FfiConverterString.read(buf),
            FfiConverterTypeSqlValue.read(buf),
        )
    }

    override fun allocationSize(value: SqlField) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterTypeSqlValue.allocationSize(value.`value`)
    )

    override fun write(value: SqlField, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterTypeSqlValue.write(value.`value`, buf)
    }
}



data class SqlRow (
    val `fields`: List<SqlField>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSqlRow: FfiConverterRustBuffer<SqlRow> {
    override fun read(buf: ByteBuffer): SqlRow {
        return SqlRow(
            FfiConverterSequenceTypeSqlField.read(buf),
        )
    }

    override fun allocationSize(value: SqlRow) = (
            FfiConverterSequenceTypeSqlField.allocationSize(value.`fields`)
    )

    override fun write(value: SqlRow, buf: ByteBuffer) {
            FfiConverterSequenceTypeSqlField.write(value.`fields`, buf)
    }
}



data class Struct (
    val `name`: kotlin.String
    , 
    val `children`: List<Member>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeStruct: FfiConverterRustBuffer<Struct> {
    override fun read(buf: ByteBuffer): Struct {
        return Struct(
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeMember.read(buf),
        )
    }

    override fun allocationSize(value: Struct) = (
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterSequenceTypeMember.allocationSize(value.`children`)
    )

    override fun write(value: Struct, buf: ByteBuffer) {
            FfiConverterString.write(value.`name`, buf)
            FfiConverterSequenceTypeMember.write(value.`children`, buf)
    }
}



data class TaskProgress (
    val `taskId`: kotlin.String
    , 
    val `count`: kotlin.UInt
    , 
    val `completed`: kotlin.Boolean
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTaskProgress: FfiConverterRustBuffer<TaskProgress> {
    override fun read(buf: ByteBuffer): TaskProgress {
        return TaskProgress(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: TaskProgress) = (
            FfiConverterString.allocationSize(value.`taskId`) +
            FfiConverterUInt.allocationSize(value.`count`) +
            FfiConverterBoolean.allocationSize(value.`completed`)
    )

    override fun write(value: TaskProgress, buf: ByteBuffer) {
            FfiConverterString.write(value.`taskId`, buf)
            FfiConverterUInt.write(value.`count`, buf)
            FfiConverterBoolean.write(value.`completed`, buf)
    }
}



data class Token (
    val `contractAddress`: FieldElement
    , 
    val `tokenId`: U256?
    , 
    val `name`: kotlin.String
    , 
    val `symbol`: kotlin.String
    , 
    val `decimals`: kotlin.UByte
    , 
    val `metadata`: kotlin.String
    , 
    val `totalSupply`: U256?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeToken: FfiConverterRustBuffer<Token> {
    override fun read(buf: ByteBuffer): Token {
        return Token(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterOptionalTypeU256.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeU256.read(buf),
        )
    }

    override fun allocationSize(value: Token) = (
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterOptionalTypeU256.allocationSize(value.`tokenId`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`symbol`) +
            FfiConverterUByte.allocationSize(value.`decimals`) +
            FfiConverterString.allocationSize(value.`metadata`) +
            FfiConverterOptionalTypeU256.allocationSize(value.`totalSupply`)
    )

    override fun write(value: Token, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterOptionalTypeU256.write(value.`tokenId`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`symbol`, buf)
            FfiConverterUByte.write(value.`decimals`, buf)
            FfiConverterString.write(value.`metadata`, buf)
            FfiConverterOptionalTypeU256.write(value.`totalSupply`, buf)
    }
}



data class TokenBalance (
    val `balance`: U256
    , 
    val `accountAddress`: FieldElement
    , 
    val `contractAddress`: FieldElement
    , 
    val `tokenId`: U256?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenBalance: FfiConverterRustBuffer<TokenBalance> {
    override fun read(buf: ByteBuffer): TokenBalance {
        return TokenBalance(
            FfiConverterTypeU256.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterOptionalTypeU256.read(buf),
        )
    }

    override fun allocationSize(value: TokenBalance) = (
            FfiConverterTypeU256.allocationSize(value.`balance`) +
            FfiConverterTypeFieldElement.allocationSize(value.`accountAddress`) +
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterOptionalTypeU256.allocationSize(value.`tokenId`)
    )

    override fun write(value: TokenBalance, buf: ByteBuffer) {
            FfiConverterTypeU256.write(value.`balance`, buf)
            FfiConverterTypeFieldElement.write(value.`accountAddress`, buf)
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterOptionalTypeU256.write(value.`tokenId`, buf)
    }
}



data class TokenBalanceQuery (
    val `contractAddresses`: List<FieldElement>
    , 
    val `accountAddresses`: List<FieldElement>
    , 
    val `tokenIds`: List<U256>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenBalanceQuery: FfiConverterRustBuffer<TokenBalanceQuery> {
    override fun read(buf: ByteBuffer): TokenBalanceQuery {
        return TokenBalanceQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeU256.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: TokenBalanceQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`accountAddresses`) +
            FfiConverterSequenceTypeU256.allocationSize(value.`tokenIds`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: TokenBalanceQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`accountAddresses`, buf)
            FfiConverterSequenceTypeU256.write(value.`tokenIds`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class TokenContract (
    val `contractAddress`: FieldElement
    , 
    val `name`: kotlin.String
    , 
    val `symbol`: kotlin.String
    , 
    val `decimals`: kotlin.UByte
    , 
    val `metadata`: kotlin.String
    , 
    val `tokenMetadata`: kotlin.String
    , 
    val `totalSupply`: U256?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenContract: FfiConverterRustBuffer<TokenContract> {
    override fun read(buf: ByteBuffer): TokenContract {
        return TokenContract(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalTypeU256.read(buf),
        )
    }

    override fun allocationSize(value: TokenContract) = (
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterString.allocationSize(value.`name`) +
            FfiConverterString.allocationSize(value.`symbol`) +
            FfiConverterUByte.allocationSize(value.`decimals`) +
            FfiConverterString.allocationSize(value.`metadata`) +
            FfiConverterString.allocationSize(value.`tokenMetadata`) +
            FfiConverterOptionalTypeU256.allocationSize(value.`totalSupply`)
    )

    override fun write(value: TokenContract, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterString.write(value.`name`, buf)
            FfiConverterString.write(value.`symbol`, buf)
            FfiConverterUByte.write(value.`decimals`, buf)
            FfiConverterString.write(value.`metadata`, buf)
            FfiConverterString.write(value.`tokenMetadata`, buf)
            FfiConverterOptionalTypeU256.write(value.`totalSupply`, buf)
    }
}



data class TokenContractQuery (
    val `contractAddresses`: List<FieldElement>
    , 
    val `contractTypes`: List<ContractType>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenContractQuery: FfiConverterRustBuffer<TokenContractQuery> {
    override fun read(buf: ByteBuffer): TokenContractQuery {
        return TokenContractQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeContractType.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: TokenContractQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceTypeContractType.allocationSize(value.`contractTypes`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: TokenContractQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceTypeContractType.write(value.`contractTypes`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class TokenQuery (
    val `contractAddresses`: List<FieldElement>
    , 
    val `tokenIds`: List<U256>
    , 
    val `attributeFilters`: List<AttributeFilter>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenQuery: FfiConverterRustBuffer<TokenQuery> {
    override fun read(buf: ByteBuffer): TokenQuery {
        return TokenQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeU256.read(buf),
            FfiConverterSequenceTypeAttributeFilter.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: TokenQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceTypeU256.allocationSize(value.`tokenIds`) +
            FfiConverterSequenceTypeAttributeFilter.allocationSize(value.`attributeFilters`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: TokenQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceTypeU256.write(value.`tokenIds`, buf)
            FfiConverterSequenceTypeAttributeFilter.write(value.`attributeFilters`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class TokenTransfer (
    val `id`: kotlin.String
    , 
    val `contractAddress`: FieldElement
    , 
    val `fromAddress`: FieldElement
    , 
    val `toAddress`: FieldElement
    , 
    val `amount`: U256
    , 
    val `tokenId`: U256?
    , 
    val `executedAt`: kotlin.ULong
    , 
    val `eventId`: kotlin.String?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenTransfer: FfiConverterRustBuffer<TokenTransfer> {
    override fun read(buf: ByteBuffer): TokenTransfer {
        return TokenTransfer(
            FfiConverterString.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeU256.read(buf),
            FfiConverterOptionalTypeU256.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: TokenTransfer) = (
            FfiConverterString.allocationSize(value.`id`) +
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterTypeFieldElement.allocationSize(value.`fromAddress`) +
            FfiConverterTypeFieldElement.allocationSize(value.`toAddress`) +
            FfiConverterTypeU256.allocationSize(value.`amount`) +
            FfiConverterOptionalTypeU256.allocationSize(value.`tokenId`) +
            FfiConverterULong.allocationSize(value.`executedAt`) +
            FfiConverterOptionalString.allocationSize(value.`eventId`)
    )

    override fun write(value: TokenTransfer, buf: ByteBuffer) {
            FfiConverterString.write(value.`id`, buf)
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterTypeFieldElement.write(value.`fromAddress`, buf)
            FfiConverterTypeFieldElement.write(value.`toAddress`, buf)
            FfiConverterTypeU256.write(value.`amount`, buf)
            FfiConverterOptionalTypeU256.write(value.`tokenId`, buf)
            FfiConverterULong.write(value.`executedAt`, buf)
            FfiConverterOptionalString.write(value.`eventId`, buf)
    }
}



data class TokenTransferQuery (
    val `contractAddresses`: List<FieldElement>
    , 
    val `accountAddresses`: List<FieldElement>
    , 
    val `tokenIds`: List<U256>
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTokenTransferQuery: FfiConverterRustBuffer<TokenTransferQuery> {
    override fun read(buf: ByteBuffer): TokenTransferQuery {
        return TokenTransferQuery(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeU256.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: TokenTransferQuery) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`accountAddresses`) +
            FfiConverterSequenceTypeU256.allocationSize(value.`tokenIds`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: TokenTransferQuery, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`accountAddresses`, buf)
            FfiConverterSequenceTypeU256.write(value.`tokenIds`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class Transaction (
    val `transactionHash`: FieldElement
    , 
    val `senderAddress`: FieldElement
    , 
    val `calldata`: List<FieldElement>
    , 
    val `maxFee`: FieldElement
    , 
    val `signature`: List<FieldElement>
    , 
    val `nonce`: FieldElement
    , 
    val `blockNumber`: kotlin.ULong
    , 
    val `transactionType`: kotlin.String
    , 
    val `blockTimestamp`: kotlin.ULong
    , 
    val `calls`: List<TransactionCall>
    , 
    val `uniqueModels`: List<FieldElement>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTransaction: FfiConverterRustBuffer<Transaction> {
    override fun read(buf: ByteBuffer): Transaction {
        return Transaction(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceTypeTransactionCall.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
        )
    }

    override fun allocationSize(value: Transaction) = (
            FfiConverterTypeFieldElement.allocationSize(value.`transactionHash`) +
            FfiConverterTypeFieldElement.allocationSize(value.`senderAddress`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`calldata`) +
            FfiConverterTypeFieldElement.allocationSize(value.`maxFee`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`signature`) +
            FfiConverterTypeFieldElement.allocationSize(value.`nonce`) +
            FfiConverterULong.allocationSize(value.`blockNumber`) +
            FfiConverterString.allocationSize(value.`transactionType`) +
            FfiConverterULong.allocationSize(value.`blockTimestamp`) +
            FfiConverterSequenceTypeTransactionCall.allocationSize(value.`calls`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`uniqueModels`)
    )

    override fun write(value: Transaction, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`transactionHash`, buf)
            FfiConverterTypeFieldElement.write(value.`senderAddress`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`calldata`, buf)
            FfiConverterTypeFieldElement.write(value.`maxFee`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`signature`, buf)
            FfiConverterTypeFieldElement.write(value.`nonce`, buf)
            FfiConverterULong.write(value.`blockNumber`, buf)
            FfiConverterString.write(value.`transactionType`, buf)
            FfiConverterULong.write(value.`blockTimestamp`, buf)
            FfiConverterSequenceTypeTransactionCall.write(value.`calls`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`uniqueModels`, buf)
    }
}



data class TransactionCall (
    val `contractAddress`: FieldElement
    , 
    val `entrypoint`: kotlin.String
    , 
    val `calldata`: List<FieldElement>
    , 
    val `callType`: CallType
    , 
    val `callerAddress`: FieldElement
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTransactionCall: FfiConverterRustBuffer<TransactionCall> {
    override fun read(buf: ByteBuffer): TransactionCall {
        return TransactionCall(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterTypeCallType.read(buf),
            FfiConverterTypeFieldElement.read(buf),
        )
    }

    override fun allocationSize(value: TransactionCall) = (
            FfiConverterTypeFieldElement.allocationSize(value.`contractAddress`) +
            FfiConverterString.allocationSize(value.`entrypoint`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`calldata`) +
            FfiConverterTypeCallType.allocationSize(value.`callType`) +
            FfiConverterTypeFieldElement.allocationSize(value.`callerAddress`)
    )

    override fun write(value: TransactionCall, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`contractAddress`, buf)
            FfiConverterString.write(value.`entrypoint`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`calldata`, buf)
            FfiConverterTypeCallType.write(value.`callType`, buf)
            FfiConverterTypeFieldElement.write(value.`callerAddress`, buf)
    }
}



data class TransactionFilter (
    val `transactionHashes`: List<FieldElement>
    , 
    val `callerAddresses`: List<FieldElement>
    , 
    val `contractAddresses`: List<FieldElement>
    , 
    val `entrypoints`: List<kotlin.String>
    , 
    val `modelSelectors`: List<FieldElement>
    , 
    val `fromBlock`: kotlin.ULong?
    , 
    val `toBlock`: kotlin.ULong?
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTransactionFilter: FfiConverterRustBuffer<TransactionFilter> {
    override fun read(buf: ByteBuffer): TransactionFilter {
        return TransactionFilter(
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterSequenceString.read(buf),
            FfiConverterSequenceTypeFieldElement.read(buf),
            FfiConverterOptionalULong.read(buf),
            FfiConverterOptionalULong.read(buf),
        )
    }

    override fun allocationSize(value: TransactionFilter) = (
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`transactionHashes`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`callerAddresses`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`contractAddresses`) +
            FfiConverterSequenceString.allocationSize(value.`entrypoints`) +
            FfiConverterSequenceTypeFieldElement.allocationSize(value.`modelSelectors`) +
            FfiConverterOptionalULong.allocationSize(value.`fromBlock`) +
            FfiConverterOptionalULong.allocationSize(value.`toBlock`)
    )

    override fun write(value: TransactionFilter, buf: ByteBuffer) {
            FfiConverterSequenceTypeFieldElement.write(value.`transactionHashes`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`callerAddresses`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`contractAddresses`, buf)
            FfiConverterSequenceString.write(value.`entrypoints`, buf)
            FfiConverterSequenceTypeFieldElement.write(value.`modelSelectors`, buf)
            FfiConverterOptionalULong.write(value.`fromBlock`, buf)
            FfiConverterOptionalULong.write(value.`toBlock`, buf)
    }
}



data class TransactionQuery (
    val `filter`: TransactionFilter?
    , 
    val `pagination`: Pagination
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTransactionQuery: FfiConverterRustBuffer<TransactionQuery> {
    override fun read(buf: ByteBuffer): TransactionQuery {
        return TransactionQuery(
            FfiConverterOptionalTypeTransactionFilter.read(buf),
            FfiConverterTypePagination.read(buf),
        )
    }

    override fun allocationSize(value: TransactionQuery) = (
            FfiConverterOptionalTypeTransactionFilter.allocationSize(value.`filter`) +
            FfiConverterTypePagination.allocationSize(value.`pagination`)
    )

    override fun write(value: TransactionQuery, buf: ByteBuffer) {
            FfiConverterOptionalTypeTransactionFilter.write(value.`filter`, buf)
            FfiConverterTypePagination.write(value.`pagination`, buf)
    }
}



data class World (
    val `worldAddress`: FieldElement
    , 
    val `models`: List<Model>
    
){
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeWorld: FfiConverterRustBuffer<World> {
    override fun read(buf: ByteBuffer): World {
        return World(
            FfiConverterTypeFieldElement.read(buf),
            FfiConverterSequenceTypeModel.read(buf),
        )
    }

    override fun allocationSize(value: World) = (
            FfiConverterTypeFieldElement.allocationSize(value.`worldAddress`) +
            FfiConverterSequenceTypeModel.allocationSize(value.`models`)
    )

    override fun write(value: World, buf: ByteBuffer) {
            FfiConverterTypeFieldElement.write(value.`worldAddress`, buf)
            FfiConverterSequenceTypeModel.write(value.`models`, buf)
    }
}




enum class CallType {
    
    EXECUTE,
    EXECUTE_FROM_OUTSIDE;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeCallType: FfiConverterRustBuffer<CallType> {
    override fun read(buf: ByteBuffer) = try {
        CallType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: CallType) = 4UL

    override fun write(value: CallType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Clause {
    
    data class HashedKeys(
        val `keys`: List<FieldElement>) : Clause()
        
    {
        

        companion object
    }
    
    data class Keys(
        val `clause`: KeysClause) : Clause()
        
    {
        

        companion object
    }
    
    data class Member(
        val `clause`: MemberClause) : Clause()
        
    {
        

        companion object
    }
    
    data class Composite(
        val `clause`: CompositeClause) : Clause()
        
    {
        

        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeClause : FfiConverterRustBuffer<Clause>{
    override fun read(buf: ByteBuffer): Clause {
        return when(buf.getInt()) {
            1 -> Clause.HashedKeys(
                FfiConverterSequenceTypeFieldElement.read(buf),
                )
            2 -> Clause.Keys(
                FfiConverterTypeKeysClause.read(buf),
                )
            3 -> Clause.Member(
                FfiConverterTypeMemberClause.read(buf),
                )
            4 -> Clause.Composite(
                FfiConverterTypeCompositeClause.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Clause) = when(value) {
        is Clause.HashedKeys -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceTypeFieldElement.allocationSize(value.`keys`)
            )
        }
        is Clause.Keys -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeKeysClause.allocationSize(value.`clause`)
            )
        }
        is Clause.Member -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeMemberClause.allocationSize(value.`clause`)
            )
        }
        is Clause.Composite -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeCompositeClause.allocationSize(value.`clause`)
            )
        }
    }

    override fun write(value: Clause, buf: ByteBuffer) {
        when(value) {
            is Clause.HashedKeys -> {
                buf.putInt(1)
                FfiConverterSequenceTypeFieldElement.write(value.`keys`, buf)
                Unit
            }
            is Clause.Keys -> {
                buf.putInt(2)
                FfiConverterTypeKeysClause.write(value.`clause`, buf)
                Unit
            }
            is Clause.Member -> {
                buf.putInt(3)
                FfiConverterTypeMemberClause.write(value.`clause`, buf)
                Unit
            }
            is Clause.Composite -> {
                buf.putInt(4)
                FfiConverterTypeCompositeClause.write(value.`clause`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class ComparisonOperator {
    
    EQ,
    NEQ,
    GT,
    GTE,
    LT,
    LTE,
    IN,
    NOT_IN,
    CONTAINS,
    CONTAINS_ALL,
    CONTAINS_ANY,
    ARRAY_LENGTH_EQ,
    ARRAY_LENGTH_GT,
    ARRAY_LENGTH_LT;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeComparisonOperator: FfiConverterRustBuffer<ComparisonOperator> {
    override fun read(buf: ByteBuffer) = try {
        ComparisonOperator.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ComparisonOperator) = 4UL

    override fun write(value: ComparisonOperator, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class ContractType {
    
    WORLD,
    ERC20,
    ERC721,
    ERC1155,
    UDC,
    OTHER;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeContractType: FfiConverterRustBuffer<ContractType> {
    override fun read(buf: ByteBuffer) = try {
        ContractType.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ContractType) = 4UL

    override fun write(value: ContractType, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class DojoException(message: String): kotlin.Exception(message) {
        
        class ClientException(message: String) : DojoException(message)
        
        class SerializationException(message: String) : DojoException(message)
        
        class NetworkException(message: String) : DojoException(message)
        
        class InvalidInput(message: String) : DojoException(message)
        
        class ConnectionException(message: String) : DojoException(message)
        
        class PublishException(message: String) : DojoException(message)
        
        class QueryException(message: String) : DojoException(message)
        
        class SubscriptionException(message: String) : DojoException(message)
        

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<DojoException> {
        override fun lift(error_buf: RustBuffer.ByValue): DojoException = FfiConverterTypeDojoError.lift(error_buf)
    }
}

/**
 * @suppress
 */
public object FfiConverterTypeDojoError : FfiConverterRustBuffer<DojoException> {
    override fun read(buf: ByteBuffer): DojoException {
        
            return when(buf.getInt()) {
            1 -> DojoException.ClientException(FfiConverterString.read(buf))
            2 -> DojoException.SerializationException(FfiConverterString.read(buf))
            3 -> DojoException.NetworkException(FfiConverterString.read(buf))
            4 -> DojoException.InvalidInput(FfiConverterString.read(buf))
            5 -> DojoException.ConnectionException(FfiConverterString.read(buf))
            6 -> DojoException.PublishException(FfiConverterString.read(buf))
            7 -> DojoException.QueryException(FfiConverterString.read(buf))
            8 -> DojoException.SubscriptionException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: DojoException): ULong {
        return 4UL
    }

    override fun write(value: DojoException, buf: ByteBuffer) {
        when(value) {
            is DojoException.ClientException -> {
                buf.putInt(1)
                Unit
            }
            is DojoException.SerializationException -> {
                buf.putInt(2)
                Unit
            }
            is DojoException.NetworkException -> {
                buf.putInt(3)
                Unit
            }
            is DojoException.InvalidInput -> {
                buf.putInt(4)
                Unit
            }
            is DojoException.ConnectionException -> {
                buf.putInt(5)
                Unit
            }
            is DojoException.PublishException -> {
                buf.putInt(6)
                Unit
            }
            is DojoException.QueryException -> {
                buf.putInt(7)
                Unit
            }
            is DojoException.SubscriptionException -> {
                buf.putInt(8)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




enum class LogicalOperator {
    
    AND,
    OR;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeLogicalOperator: FfiConverterRustBuffer<LogicalOperator> {
    override fun read(buf: ByteBuffer) = try {
        LogicalOperator.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: LogicalOperator) = 4UL

    override fun write(value: LogicalOperator, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class MemberValue {
    
    data class Primitive(
        val `value`: Primitive) : MemberValue()
        
    {
        

        companion object
    }
    
    data class String(
        val `value`: kotlin.String) : MemberValue()
        
    {
        

        companion object
    }
    
    data class List(
        val `values`: List<MemberValue>) : MemberValue()
        
    {
        

        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeMemberValue : FfiConverterRustBuffer<MemberValue>{
    override fun read(buf: ByteBuffer): MemberValue {
        return when(buf.getInt()) {
            1 -> MemberValue.Primitive(
                FfiConverterTypePrimitive.read(buf),
                )
            2 -> MemberValue.String(
                FfiConverterString.read(buf),
                )
            3 -> MemberValue.List(
                FfiConverterSequenceTypeMemberValue.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MemberValue) = when(value) {
        is MemberValue.Primitive -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypePrimitive.allocationSize(value.`value`)
            )
        }
        is MemberValue.String -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`value`)
            )
        }
        is MemberValue.List -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceTypeMemberValue.allocationSize(value.`values`)
            )
        }
    }

    override fun write(value: MemberValue, buf: ByteBuffer) {
        when(value) {
            is MemberValue.Primitive -> {
                buf.putInt(1)
                FfiConverterTypePrimitive.write(value.`value`, buf)
                Unit
            }
            is MemberValue.String -> {
                buf.putInt(2)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
            is MemberValue.List -> {
                buf.putInt(3)
                FfiConverterSequenceTypeMemberValue.write(value.`values`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class OrderDirection {
    
    ASC,
    DESC;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypeOrderDirection: FfiConverterRustBuffer<OrderDirection> {
    override fun read(buf: ByteBuffer) = try {
        OrderDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: OrderDirection) = 4UL

    override fun write(value: OrderDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PaginationDirection {
    
    FORWARD,
    BACKWARD;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypePaginationDirection: FfiConverterRustBuffer<PaginationDirection> {
    override fun read(buf: ByteBuffer) = try {
        PaginationDirection.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PaginationDirection) = 4UL

    override fun write(value: PaginationDirection, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class PatternMatching {
    
    FIXED_LEN,
    VARIABLE_LEN;
    companion object
}


/**
 * @suppress
 */
public object FfiConverterTypePatternMatching: FfiConverterRustBuffer<PatternMatching> {
    override fun read(buf: ByteBuffer) = try {
        PatternMatching.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: PatternMatching) = 4UL

    override fun write(value: PatternMatching, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}





sealed class Primitive {
    
    data class I8(
        val `value`: kotlin.Byte) : Primitive()
        
    {
        

        companion object
    }
    
    data class I16(
        val `value`: kotlin.Short) : Primitive()
        
    {
        

        companion object
    }
    
    data class I32(
        val `value`: kotlin.Int) : Primitive()
        
    {
        

        companion object
    }
    
    data class I64(
        val `value`: kotlin.Long) : Primitive()
        
    {
        

        companion object
    }
    
    data class I128(
        val `value`: List<kotlin.UByte>) : Primitive()
        
    {
        

        companion object
    }
    
    data class U8(
        val `value`: kotlin.UByte) : Primitive()
        
    {
        

        companion object
    }
    
    data class U16(
        val `value`: kotlin.UShort) : Primitive()
        
    {
        

        companion object
    }
    
    data class U32(
        val `value`: kotlin.UInt) : Primitive()
        
    {
        

        companion object
    }
    
    data class U64(
        val `value`: kotlin.ULong) : Primitive()
        
    {
        

        companion object
    }
    
    data class U128(
        val `value`: List<kotlin.UByte>) : Primitive()
        
    {
        

        companion object
    }
    
    data class U256(
        val `value`: U256) : Primitive()
        
    {
        

        companion object
    }
    
    data class Bool(
        val `value`: kotlin.Boolean) : Primitive()
        
    {
        

        companion object
    }
    
    data class Felt252(
        val `value`: FieldElement) : Primitive()
        
    {
        

        companion object
    }
    
    data class ClassHash(
        val `value`: FieldElement) : Primitive()
        
    {
        

        companion object
    }
    
    data class ContractAddress(
        val `value`: FieldElement) : Primitive()
        
    {
        

        companion object
    }
    
    data class EthAddress(
        val `value`: FieldElement) : Primitive()
        
    {
        

        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypePrimitive : FfiConverterRustBuffer<Primitive>{
    override fun read(buf: ByteBuffer): Primitive {
        return when(buf.getInt()) {
            1 -> Primitive.I8(
                FfiConverterByte.read(buf),
                )
            2 -> Primitive.I16(
                FfiConverterShort.read(buf),
                )
            3 -> Primitive.I32(
                FfiConverterInt.read(buf),
                )
            4 -> Primitive.I64(
                FfiConverterLong.read(buf),
                )
            5 -> Primitive.I128(
                FfiConverterSequenceUByte.read(buf),
                )
            6 -> Primitive.U8(
                FfiConverterUByte.read(buf),
                )
            7 -> Primitive.U16(
                FfiConverterUShort.read(buf),
                )
            8 -> Primitive.U32(
                FfiConverterUInt.read(buf),
                )
            9 -> Primitive.U64(
                FfiConverterULong.read(buf),
                )
            10 -> Primitive.U128(
                FfiConverterSequenceUByte.read(buf),
                )
            11 -> Primitive.U256(
                FfiConverterTypeU256.read(buf),
                )
            12 -> Primitive.Bool(
                FfiConverterBoolean.read(buf),
                )
            13 -> Primitive.Felt252(
                FfiConverterTypeFieldElement.read(buf),
                )
            14 -> Primitive.ClassHash(
                FfiConverterTypeFieldElement.read(buf),
                )
            15 -> Primitive.ContractAddress(
                FfiConverterTypeFieldElement.read(buf),
                )
            16 -> Primitive.EthAddress(
                FfiConverterTypeFieldElement.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Primitive) = when(value) {
        is Primitive.I8 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterByte.allocationSize(value.`value`)
            )
        }
        is Primitive.I16 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterShort.allocationSize(value.`value`)
            )
        }
        is Primitive.I32 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterInt.allocationSize(value.`value`)
            )
        }
        is Primitive.I64 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterLong.allocationSize(value.`value`)
            )
        }
        is Primitive.I128 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceUByte.allocationSize(value.`value`)
            )
        }
        is Primitive.U8 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterUByte.allocationSize(value.`value`)
            )
        }
        is Primitive.U16 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterUShort.allocationSize(value.`value`)
            )
        }
        is Primitive.U32 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterUInt.allocationSize(value.`value`)
            )
        }
        is Primitive.U64 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`value`)
            )
        }
        is Primitive.U128 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceUByte.allocationSize(value.`value`)
            )
        }
        is Primitive.U256 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeU256.allocationSize(value.`value`)
            )
        }
        is Primitive.Bool -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterBoolean.allocationSize(value.`value`)
            )
        }
        is Primitive.Felt252 -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFieldElement.allocationSize(value.`value`)
            )
        }
        is Primitive.ClassHash -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFieldElement.allocationSize(value.`value`)
            )
        }
        is Primitive.ContractAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFieldElement.allocationSize(value.`value`)
            )
        }
        is Primitive.EthAddress -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFieldElement.allocationSize(value.`value`)
            )
        }
    }

    override fun write(value: Primitive, buf: ByteBuffer) {
        when(value) {
            is Primitive.I8 -> {
                buf.putInt(1)
                FfiConverterByte.write(value.`value`, buf)
                Unit
            }
            is Primitive.I16 -> {
                buf.putInt(2)
                FfiConverterShort.write(value.`value`, buf)
                Unit
            }
            is Primitive.I32 -> {
                buf.putInt(3)
                FfiConverterInt.write(value.`value`, buf)
                Unit
            }
            is Primitive.I64 -> {
                buf.putInt(4)
                FfiConverterLong.write(value.`value`, buf)
                Unit
            }
            is Primitive.I128 -> {
                buf.putInt(5)
                FfiConverterSequenceUByte.write(value.`value`, buf)
                Unit
            }
            is Primitive.U8 -> {
                buf.putInt(6)
                FfiConverterUByte.write(value.`value`, buf)
                Unit
            }
            is Primitive.U16 -> {
                buf.putInt(7)
                FfiConverterUShort.write(value.`value`, buf)
                Unit
            }
            is Primitive.U32 -> {
                buf.putInt(8)
                FfiConverterUInt.write(value.`value`, buf)
                Unit
            }
            is Primitive.U64 -> {
                buf.putInt(9)
                FfiConverterULong.write(value.`value`, buf)
                Unit
            }
            is Primitive.U128 -> {
                buf.putInt(10)
                FfiConverterSequenceUByte.write(value.`value`, buf)
                Unit
            }
            is Primitive.U256 -> {
                buf.putInt(11)
                FfiConverterTypeU256.write(value.`value`, buf)
                Unit
            }
            is Primitive.Bool -> {
                buf.putInt(12)
                FfiConverterBoolean.write(value.`value`, buf)
                Unit
            }
            is Primitive.Felt252 -> {
                buf.putInt(13)
                FfiConverterTypeFieldElement.write(value.`value`, buf)
                Unit
            }
            is Primitive.ClassHash -> {
                buf.putInt(14)
                FfiConverterTypeFieldElement.write(value.`value`, buf)
                Unit
            }
            is Primitive.ContractAddress -> {
                buf.putInt(15)
                FfiConverterTypeFieldElement.write(value.`value`, buf)
                Unit
            }
            is Primitive.EthAddress -> {
                buf.putInt(16)
                FfiConverterTypeFieldElement.write(value.`value`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class SqlValue {
    
    data class Text(
        val `value`: kotlin.String) : SqlValue()
        
    {
        

        companion object
    }
    
    data class Integer(
        val `value`: kotlin.Long) : SqlValue()
        
    {
        

        companion object
    }
    
    data class Real(
        val `value`: kotlin.Double) : SqlValue()
        
    {
        

        companion object
    }
    
    data class Blob(
        val `value`: List<kotlin.UByte>) : SqlValue()
        
    {
        

        companion object
    }
    
    object Null : SqlValue()
    
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeSqlValue : FfiConverterRustBuffer<SqlValue>{
    override fun read(buf: ByteBuffer): SqlValue {
        return when(buf.getInt()) {
            1 -> SqlValue.Text(
                FfiConverterString.read(buf),
                )
            2 -> SqlValue.Integer(
                FfiConverterLong.read(buf),
                )
            3 -> SqlValue.Real(
                FfiConverterDouble.read(buf),
                )
            4 -> SqlValue.Blob(
                FfiConverterSequenceUByte.read(buf),
                )
            5 -> SqlValue.Null
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: SqlValue) = when(value) {
        is SqlValue.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`value`)
            )
        }
        is SqlValue.Integer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterLong.allocationSize(value.`value`)
            )
        }
        is SqlValue.Real -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterDouble.allocationSize(value.`value`)
            )
        }
        is SqlValue.Blob -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceUByte.allocationSize(value.`value`)
            )
        }
        is SqlValue.Null -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
            )
        }
    }

    override fun write(value: SqlValue, buf: ByteBuffer) {
        when(value) {
            is SqlValue.Text -> {
                buf.putInt(1)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
            is SqlValue.Integer -> {
                buf.putInt(2)
                FfiConverterLong.write(value.`value`, buf)
                Unit
            }
            is SqlValue.Real -> {
                buf.putInt(3)
                FfiConverterDouble.write(value.`value`, buf)
                Unit
            }
            is SqlValue.Blob -> {
                buf.putInt(4)
                FfiConverterSequenceUByte.write(value.`value`, buf)
                Unit
            }
            is SqlValue.Null -> {
                buf.putInt(5)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class Ty {
    
    data class Primitive(
        val `value`: Primitive) : Ty()
        
    {
        

        companion object
    }
    
    data class Struct(
        val `value`: Struct) : Ty()
        
    {
        

        companion object
    }
    
    data class Enum(
        val `value`: EnumType) : Ty()
        
    {
        

        companion object
    }
    
    data class Tuple(
        val `values`: List<Ty>) : Ty()
        
    {
        

        companion object
    }
    
    data class Array(
        val `values`: List<Ty>) : Ty()
        
    {
        

        companion object
    }
    
    data class FixedSizeArray(
        val `value`: FixedSizeArray) : Ty()
        
    {
        

        companion object
    }
    
    data class ByteArray(
        val `value`: kotlin.String) : Ty()
        
    {
        

        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeTy : FfiConverterRustBuffer<Ty>{
    override fun read(buf: ByteBuffer): Ty {
        return when(buf.getInt()) {
            1 -> Ty.Primitive(
                FfiConverterTypePrimitive.read(buf),
                )
            2 -> Ty.Struct(
                FfiConverterTypeStruct.read(buf),
                )
            3 -> Ty.Enum(
                FfiConverterTypeEnumType.read(buf),
                )
            4 -> Ty.Tuple(
                FfiConverterSequenceTypeTy.read(buf),
                )
            5 -> Ty.Array(
                FfiConverterSequenceTypeTy.read(buf),
                )
            6 -> Ty.FixedSizeArray(
                FfiConverterTypeFixedSizeArray.read(buf),
                )
            7 -> Ty.ByteArray(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Ty) = when(value) {
        is Ty.Primitive -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypePrimitive.allocationSize(value.`value`)
            )
        }
        is Ty.Struct -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeStruct.allocationSize(value.`value`)
            )
        }
        is Ty.Enum -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeEnumType.allocationSize(value.`value`)
            )
        }
        is Ty.Tuple -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceTypeTy.allocationSize(value.`values`)
            )
        }
        is Ty.Array -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceTypeTy.allocationSize(value.`values`)
            )
        }
        is Ty.FixedSizeArray -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterTypeFixedSizeArray.allocationSize(value.`value`)
            )
        }
        is Ty.ByteArray -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`value`)
            )
        }
    }

    override fun write(value: Ty, buf: ByteBuffer) {
        when(value) {
            is Ty.Primitive -> {
                buf.putInt(1)
                FfiConverterTypePrimitive.write(value.`value`, buf)
                Unit
            }
            is Ty.Struct -> {
                buf.putInt(2)
                FfiConverterTypeStruct.write(value.`value`, buf)
                Unit
            }
            is Ty.Enum -> {
                buf.putInt(3)
                FfiConverterTypeEnumType.write(value.`value`, buf)
                Unit
            }
            is Ty.Tuple -> {
                buf.putInt(4)
                FfiConverterSequenceTypeTy.write(value.`values`, buf)
                Unit
            }
            is Ty.Array -> {
                buf.putInt(5)
                FfiConverterSequenceTypeTy.write(value.`values`, buf)
                Unit
            }
            is Ty.FixedSizeArray -> {
                buf.putInt(6)
                FfiConverterTypeFixedSizeArray.write(value.`value`, buf)
                Unit
            }
            is Ty.ByteArray -> {
                buf.putInt(7)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}





sealed class ValueType {
    
    data class String(
        val `value`: kotlin.String) : ValueType()
        
    {
        

        companion object
    }
    
    data class Int(
        val `value`: kotlin.Long) : ValueType()
        
    {
        

        companion object
    }
    
    data class UInt(
        val `value`: kotlin.ULong) : ValueType()
        
    {
        

        companion object
    }
    
    data class Bool(
        val `value`: kotlin.Boolean) : ValueType()
        
    {
        

        companion object
    }
    
    data class Bytes(
        val `value`: List<kotlin.UByte>) : ValueType()
        
    {
        

        companion object
    }
    

    
    companion object
}

/**
 * @suppress
 */
public object FfiConverterTypeValueType : FfiConverterRustBuffer<ValueType>{
    override fun read(buf: ByteBuffer): ValueType {
        return when(buf.getInt()) {
            1 -> ValueType.String(
                FfiConverterString.read(buf),
                )
            2 -> ValueType.Int(
                FfiConverterLong.read(buf),
                )
            3 -> ValueType.UInt(
                FfiConverterULong.read(buf),
                )
            4 -> ValueType.Bool(
                FfiConverterBoolean.read(buf),
                )
            5 -> ValueType.Bytes(
                FfiConverterSequenceUByte.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ValueType) = when(value) {
        is ValueType.String -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterString.allocationSize(value.`value`)
            )
        }
        is ValueType.Int -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterLong.allocationSize(value.`value`)
            )
        }
        is ValueType.UInt -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterULong.allocationSize(value.`value`)
            )
        }
        is ValueType.Bool -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterBoolean.allocationSize(value.`value`)
            )
        }
        is ValueType.Bytes -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4UL
                + FfiConverterSequenceUByte.allocationSize(value.`value`)
            )
        }
    }

    override fun write(value: ValueType, buf: ByteBuffer) {
        when(value) {
            is ValueType.String -> {
                buf.putInt(1)
                FfiConverterString.write(value.`value`, buf)
                Unit
            }
            is ValueType.Int -> {
                buf.putInt(2)
                FfiConverterLong.write(value.`value`, buf)
                Unit
            }
            is ValueType.UInt -> {
                buf.putInt(3)
                FfiConverterULong.write(value.`value`, buf)
                Unit
            }
            is ValueType.Bool -> {
                buf.putInt(4)
                FfiConverterBoolean.write(value.`value`, buf)
                Unit
            }
            is ValueType.Bytes -> {
                buf.putInt(5)
                FfiConverterSequenceUByte.write(value.`value`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}







public interface EntityUpdateCallback {
    
    fun `onUpdate`(`entity`: Entity)
    
    fun `onError`(`error`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEntityUpdateCallback {
    internal object `onUpdate`: UniffiCallbackInterfaceEntityUpdateCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`entity`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEntityUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUpdate`(
                    FfiConverterTypeEntity.lift(`entity`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onError`: UniffiCallbackInterfaceEntityUpdateCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEntityUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEntityUpdateCallback.handleMap.remove(handle)
        }
    }

    internal object uniffiClone: UniffiCallbackInterfaceClone {
        override fun callback(handle: Long): Long {
            return FfiConverterTypeEntityUpdateCallback.handleMap.clone(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEntityUpdateCallback.UniffiByValue(
        uniffiFree,
        uniffiClone,
        `onUpdate`,
        `onError`,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeEntityUpdateCallback: FfiConverterCallbackInterface<EntityUpdateCallback>()





public interface EventUpdateCallback {
    
    fun `onUpdate`(`event`: Event)
    
    fun `onError`(`error`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceEventUpdateCallback {
    internal object `onUpdate`: UniffiCallbackInterfaceEventUpdateCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`event`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUpdate`(
                    FfiConverterTypeEvent.lift(`event`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onError`: UniffiCallbackInterfaceEventUpdateCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeEventUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeEventUpdateCallback.handleMap.remove(handle)
        }
    }

    internal object uniffiClone: UniffiCallbackInterfaceClone {
        override fun callback(handle: Long): Long {
            return FfiConverterTypeEventUpdateCallback.handleMap.clone(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceEventUpdateCallback.UniffiByValue(
        uniffiFree,
        uniffiClone,
        `onUpdate`,
        `onError`,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeEventUpdateCallback: FfiConverterCallbackInterface<EventUpdateCallback>()





public interface TokenBalanceUpdateCallback {
    
    fun `onUpdate`(`balance`: TokenBalance)
    
    fun `onError`(`error`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceTokenBalanceUpdateCallback {
    internal object `onUpdate`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`balance`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTokenBalanceUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUpdate`(
                    FfiConverterTypeTokenBalance.lift(`balance`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onError`: UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTokenBalanceUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeTokenBalanceUpdateCallback.handleMap.remove(handle)
        }
    }

    internal object uniffiClone: UniffiCallbackInterfaceClone {
        override fun callback(handle: Long): Long {
            return FfiConverterTypeTokenBalanceUpdateCallback.handleMap.clone(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback.UniffiByValue(
        uniffiFree,
        uniffiClone,
        `onUpdate`,
        `onError`,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeTokenBalanceUpdateCallback: FfiConverterCallbackInterface<TokenBalanceUpdateCallback>()





public interface TokenUpdateCallback {
    
    fun `onUpdate`(`token`: Token)
    
    fun `onError`(`error`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceTokenUpdateCallback {
    internal object `onUpdate`: UniffiCallbackInterfaceTokenUpdateCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`token`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTokenUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUpdate`(
                    FfiConverterTypeToken.lift(`token`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onError`: UniffiCallbackInterfaceTokenUpdateCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTokenUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeTokenUpdateCallback.handleMap.remove(handle)
        }
    }

    internal object uniffiClone: UniffiCallbackInterfaceClone {
        override fun callback(handle: Long): Long {
            return FfiConverterTypeTokenUpdateCallback.handleMap.clone(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceTokenUpdateCallback.UniffiByValue(
        uniffiFree,
        uniffiClone,
        `onUpdate`,
        `onError`,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeTokenUpdateCallback: FfiConverterCallbackInterface<TokenUpdateCallback>()





public interface TransactionUpdateCallback {
    
    fun `onUpdate`(`transaction`: Transaction)
    
    fun `onError`(`error`: kotlin.String)
    
    companion object
}



// Put the implementation in an object so we don't pollute the top-level namespace
internal object uniffiCallbackInterfaceTransactionUpdateCallback {
    internal object `onUpdate`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod0 {
        override fun callback(`uniffiHandle`: Long,`transaction`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTransactionUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onUpdate`(
                    FfiConverterTypeTransaction.lift(`transaction`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }
    internal object `onError`: UniffiCallbackInterfaceTransactionUpdateCallbackMethod1 {
        override fun callback(`uniffiHandle`: Long,`error`: RustBuffer.ByValue,`uniffiOutReturn`: Pointer,uniffiCallStatus: UniffiRustCallStatus,) {
            val uniffiObj = FfiConverterTypeTransactionUpdateCallback.handleMap.get(uniffiHandle)
            val makeCall = { ->
                uniffiObj.`onError`(
                    FfiConverterString.lift(`error`),
                )
            }
            val writeReturn = { _: Unit -> Unit }
            uniffiTraitInterfaceCall(uniffiCallStatus, makeCall, writeReturn)
        }
    }

    internal object uniffiFree: UniffiCallbackInterfaceFree {
        override fun callback(handle: Long) {
            FfiConverterTypeTransactionUpdateCallback.handleMap.remove(handle)
        }
    }

    internal object uniffiClone: UniffiCallbackInterfaceClone {
        override fun callback(handle: Long): Long {
            return FfiConverterTypeTransactionUpdateCallback.handleMap.clone(handle)
        }
    }

    internal var vtable = UniffiVTableCallbackInterfaceTransactionUpdateCallback.UniffiByValue(
        uniffiFree,
        uniffiClone,
        `onUpdate`,
        `onError`,
    )

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal fun register(lib: UniffiLib) {
        lib.uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(vtable)
    }
}

/**
 * The ffiConverter which transforms the Callbacks in to handles to pass to Rust.
 *
 * @suppress
 */
public object FfiConverterTypeTransactionUpdateCallback: FfiConverterCallbackInterface<TransactionUpdateCallback>()




/**
 * @suppress
 */
public object FfiConverterOptionalUInt: FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(value: kotlin.UInt?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalULong: FfiConverterRustBuffer<kotlin.ULong?> {
    override fun read(buf: ByteBuffer): kotlin.ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: kotlin.ULong?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: kotlin.ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalBoolean: FfiConverterRustBuffer<kotlin.Boolean?> {
    override fun read(buf: ByteBuffer): kotlin.Boolean? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterBoolean.read(buf)
    }

    override fun allocationSize(value: kotlin.Boolean?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterBoolean.allocationSize(value)
        }
    }

    override fun write(value: kotlin.Boolean?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterBoolean.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalString: FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: kotlin.String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeKeysClause: FfiConverterRustBuffer<KeysClause?> {
    override fun read(buf: ByteBuffer): KeysClause? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeKeysClause.read(buf)
    }

    override fun allocationSize(value: KeysClause?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeKeysClause.allocationSize(value)
        }
    }

    override fun write(value: KeysClause?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeKeysClause.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeTransactionFilter: FfiConverterRustBuffer<TransactionFilter?> {
    override fun read(buf: ByteBuffer): TransactionFilter? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeTransactionFilter.read(buf)
    }

    override fun allocationSize(value: TransactionFilter?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeTransactionFilter.allocationSize(value)
        }
    }

    override fun write(value: TransactionFilter?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeTransactionFilter.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeClause: FfiConverterRustBuffer<Clause?> {
    override fun read(buf: ByteBuffer): Clause? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeClause.read(buf)
    }

    override fun allocationSize(value: Clause?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeClause.allocationSize(value)
        }
    }

    override fun write(value: Clause?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeClause.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeFieldElement: FfiConverterRustBuffer<FieldElement?> {
    override fun read(buf: ByteBuffer): FieldElement? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeFieldElement.read(buf)
    }

    override fun allocationSize(value: FieldElement?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeFieldElement.allocationSize(value)
        }
    }

    override fun write(value: FieldElement?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeFieldElement.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterOptionalTypeU256: FfiConverterRustBuffer<U256?> {
    override fun read(buf: ByteBuffer): U256? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeU256.read(buf)
    }

    override fun allocationSize(value: U256?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterTypeU256.allocationSize(value)
        }
    }

    override fun write(value: U256?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeU256.write(value, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<kotlin.UByte>> {
    override fun read(buf: ByteBuffer): List<kotlin.UByte> {
        val len = buf.getInt()
        return List<kotlin.UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.UByte>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceString: FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<kotlin.String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeAchievement: FfiConverterRustBuffer<List<Achievement>> {
    override fun read(buf: ByteBuffer): List<Achievement> {
        val len = buf.getInt()
        return List<Achievement>(len) {
            FfiConverterTypeAchievement.read(buf)
        }
    }

    override fun allocationSize(value: List<Achievement>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAchievement.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Achievement>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAchievement.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeAchievementTask: FfiConverterRustBuffer<List<AchievementTask>> {
    override fun read(buf: ByteBuffer): List<AchievementTask> {
        val len = buf.getInt()
        return List<AchievementTask>(len) {
            FfiConverterTypeAchievementTask.read(buf)
        }
    }

    override fun allocationSize(value: List<AchievementTask>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAchievementTask.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AchievementTask>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAchievementTask.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeActionCount: FfiConverterRustBuffer<List<ActionCount>> {
    override fun read(buf: ByteBuffer): List<ActionCount> {
        val len = buf.getInt()
        return List<ActionCount>(len) {
            FfiConverterTypeActionCount.read(buf)
        }
    }

    override fun allocationSize(value: List<ActionCount>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActionCount.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ActionCount>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActionCount.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeActivity: FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Activity>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeAggregationEntry: FfiConverterRustBuffer<List<AggregationEntry>> {
    override fun read(buf: ByteBuffer): List<AggregationEntry> {
        val len = buf.getInt()
        return List<AggregationEntry>(len) {
            FfiConverterTypeAggregationEntry.read(buf)
        }
    }

    override fun allocationSize(value: List<AggregationEntry>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAggregationEntry.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AggregationEntry>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAggregationEntry.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeAttributeFilter: FfiConverterRustBuffer<List<AttributeFilter>> {
    override fun read(buf: ByteBuffer): List<AttributeFilter> {
        val len = buf.getInt()
        return List<AttributeFilter>(len) {
            FfiConverterTypeAttributeFilter.read(buf)
        }
    }

    override fun allocationSize(value: List<AttributeFilter>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeAttributeFilter.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<AttributeFilter>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeAttributeFilter.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeContract: FfiConverterRustBuffer<List<Contract>> {
    override fun read(buf: ByteBuffer): List<Contract> {
        val len = buf.getInt()
        return List<Contract>(len) {
            FfiConverterTypeContract.read(buf)
        }
    }

    override fun allocationSize(value: List<Contract>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeContract.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Contract>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeContract.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeController: FfiConverterRustBuffer<List<Controller>> {
    override fun read(buf: ByteBuffer): List<Controller> {
        val len = buf.getInt()
        return List<Controller>(len) {
            FfiConverterTypeController.read(buf)
        }
    }

    override fun allocationSize(value: List<Controller>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeController.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Controller>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeController.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEntity: FfiConverterRustBuffer<List<Entity>> {
    override fun read(buf: ByteBuffer): List<Entity> {
        val len = buf.getInt()
        return List<Entity>(len) {
            FfiConverterTypeEntity.read(buf)
        }
    }

    override fun allocationSize(value: List<Entity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEntity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Entity>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEntity.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEnumOption: FfiConverterRustBuffer<List<EnumOption>> {
    override fun read(buf: ByteBuffer): List<EnumOption> {
        val len = buf.getInt()
        return List<EnumOption>(len) {
            FfiConverterTypeEnumOption.read(buf)
        }
    }

    override fun allocationSize(value: List<EnumOption>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEnumOption.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<EnumOption>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEnumOption.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeEvent: FfiConverterRustBuffer<List<Event>> {
    override fun read(buf: ByteBuffer): List<Event> {
        val len = buf.getInt()
        return List<Event>(len) {
            FfiConverterTypeEvent.read(buf)
        }
    }

    override fun allocationSize(value: List<Event>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeEvent.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Event>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeEvent.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeKeysClause: FfiConverterRustBuffer<List<KeysClause>> {
    override fun read(buf: ByteBuffer): List<KeysClause> {
        val len = buf.getInt()
        return List<KeysClause>(len) {
            FfiConverterTypeKeysClause.read(buf)
        }
    }

    override fun allocationSize(value: List<KeysClause>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeKeysClause.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<KeysClause>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeKeysClause.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMember: FfiConverterRustBuffer<List<Member>> {
    override fun read(buf: ByteBuffer): List<Member> {
        val len = buf.getInt()
        return List<Member>(len) {
            FfiConverterTypeMember.read(buf)
        }
    }

    override fun allocationSize(value: List<Member>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMember.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Member>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMember.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMessage: FfiConverterRustBuffer<List<Message>> {
    override fun read(buf: ByteBuffer): List<Message> {
        val len = buf.getInt()
        return List<Message>(len) {
            FfiConverterTypeMessage.read(buf)
        }
    }

    override fun allocationSize(value: List<Message>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMessage.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Message>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMessage.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeModel: FfiConverterRustBuffer<List<Model>> {
    override fun read(buf: ByteBuffer): List<Model> {
        val len = buf.getInt()
        return List<Model>(len) {
            FfiConverterTypeModel.read(buf)
        }
    }

    override fun allocationSize(value: List<Model>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeModel.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Model>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeModel.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeOrderBy: FfiConverterRustBuffer<List<OrderBy>> {
    override fun read(buf: ByteBuffer): List<OrderBy> {
        val len = buf.getInt()
        return List<OrderBy>(len) {
            FfiConverterTypeOrderBy.read(buf)
        }
    }

    override fun allocationSize(value: List<OrderBy>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeOrderBy.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OrderBy>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeOrderBy.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypePlayerAchievementEntry: FfiConverterRustBuffer<List<PlayerAchievementEntry>> {
    override fun read(buf: ByteBuffer): List<PlayerAchievementEntry> {
        val len = buf.getInt()
        return List<PlayerAchievementEntry>(len) {
            FfiConverterTypePlayerAchievementEntry.read(buf)
        }
    }

    override fun allocationSize(value: List<PlayerAchievementEntry>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePlayerAchievementEntry.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PlayerAchievementEntry>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePlayerAchievementEntry.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypePlayerAchievementProgress: FfiConverterRustBuffer<List<PlayerAchievementProgress>> {
    override fun read(buf: ByteBuffer): List<PlayerAchievementProgress> {
        val len = buf.getInt()
        return List<PlayerAchievementProgress>(len) {
            FfiConverterTypePlayerAchievementProgress.read(buf)
        }
    }

    override fun allocationSize(value: List<PlayerAchievementProgress>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePlayerAchievementProgress.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<PlayerAchievementProgress>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePlayerAchievementProgress.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeSqlField: FfiConverterRustBuffer<List<SqlField>> {
    override fun read(buf: ByteBuffer): List<SqlField> {
        val len = buf.getInt()
        return List<SqlField>(len) {
            FfiConverterTypeSqlField.read(buf)
        }
    }

    override fun allocationSize(value: List<SqlField>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeSqlField.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SqlField>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeSqlField.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeSqlRow: FfiConverterRustBuffer<List<SqlRow>> {
    override fun read(buf: ByteBuffer): List<SqlRow> {
        val len = buf.getInt()
        return List<SqlRow>(len) {
            FfiConverterTypeSqlRow.read(buf)
        }
    }

    override fun allocationSize(value: List<SqlRow>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeSqlRow.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<SqlRow>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeSqlRow.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeStruct: FfiConverterRustBuffer<List<Struct>> {
    override fun read(buf: ByteBuffer): List<Struct> {
        val len = buf.getInt()
        return List<Struct>(len) {
            FfiConverterTypeStruct.read(buf)
        }
    }

    override fun allocationSize(value: List<Struct>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeStruct.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Struct>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeStruct.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTaskProgress: FfiConverterRustBuffer<List<TaskProgress>> {
    override fun read(buf: ByteBuffer): List<TaskProgress> {
        val len = buf.getInt()
        return List<TaskProgress>(len) {
            FfiConverterTypeTaskProgress.read(buf)
        }
    }

    override fun allocationSize(value: List<TaskProgress>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTaskProgress.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TaskProgress>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTaskProgress.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeToken: FfiConverterRustBuffer<List<Token>> {
    override fun read(buf: ByteBuffer): List<Token> {
        val len = buf.getInt()
        return List<Token>(len) {
            FfiConverterTypeToken.read(buf)
        }
    }

    override fun allocationSize(value: List<Token>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeToken.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Token>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeToken.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTokenBalance: FfiConverterRustBuffer<List<TokenBalance>> {
    override fun read(buf: ByteBuffer): List<TokenBalance> {
        val len = buf.getInt()
        return List<TokenBalance>(len) {
            FfiConverterTypeTokenBalance.read(buf)
        }
    }

    override fun allocationSize(value: List<TokenBalance>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTokenBalance.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TokenBalance>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTokenBalance.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTokenContract: FfiConverterRustBuffer<List<TokenContract>> {
    override fun read(buf: ByteBuffer): List<TokenContract> {
        val len = buf.getInt()
        return List<TokenContract>(len) {
            FfiConverterTypeTokenContract.read(buf)
        }
    }

    override fun allocationSize(value: List<TokenContract>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTokenContract.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TokenContract>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTokenContract.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTokenTransfer: FfiConverterRustBuffer<List<TokenTransfer>> {
    override fun read(buf: ByteBuffer): List<TokenTransfer> {
        val len = buf.getInt()
        return List<TokenTransfer>(len) {
            FfiConverterTypeTokenTransfer.read(buf)
        }
    }

    override fun allocationSize(value: List<TokenTransfer>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTokenTransfer.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TokenTransfer>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTokenTransfer.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTransaction: FfiConverterRustBuffer<List<Transaction>> {
    override fun read(buf: ByteBuffer): List<Transaction> {
        val len = buf.getInt()
        return List<Transaction>(len) {
            FfiConverterTypeTransaction.read(buf)
        }
    }

    override fun allocationSize(value: List<Transaction>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTransaction.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Transaction>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTransaction.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTransactionCall: FfiConverterRustBuffer<List<TransactionCall>> {
    override fun read(buf: ByteBuffer): List<TransactionCall> {
        val len = buf.getInt()
        return List<TransactionCall>(len) {
            FfiConverterTypeTransactionCall.read(buf)
        }
    }

    override fun allocationSize(value: List<TransactionCall>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTransactionCall.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<TransactionCall>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTransactionCall.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeWorld: FfiConverterRustBuffer<List<World>> {
    override fun read(buf: ByteBuffer): List<World> {
        val len = buf.getInt()
        return List<World>(len) {
            FfiConverterTypeWorld.read(buf)
        }
    }

    override fun allocationSize(value: List<World>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeWorld.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<World>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeWorld.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeClause: FfiConverterRustBuffer<List<Clause>> {
    override fun read(buf: ByteBuffer): List<Clause> {
        val len = buf.getInt()
        return List<Clause>(len) {
            FfiConverterTypeClause.read(buf)
        }
    }

    override fun allocationSize(value: List<Clause>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeClause.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Clause>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeClause.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeContractType: FfiConverterRustBuffer<List<ContractType>> {
    override fun read(buf: ByteBuffer): List<ContractType> {
        val len = buf.getInt()
        return List<ContractType>(len) {
            FfiConverterTypeContractType.read(buf)
        }
    }

    override fun allocationSize(value: List<ContractType>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeContractType.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ContractType>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeContractType.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeMemberValue: FfiConverterRustBuffer<List<MemberValue>> {
    override fun read(buf: ByteBuffer): List<MemberValue> {
        val len = buf.getInt()
        return List<MemberValue>(len) {
            FfiConverterTypeMemberValue.read(buf)
        }
    }

    override fun allocationSize(value: List<MemberValue>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeMemberValue.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<MemberValue>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeMemberValue.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeTy: FfiConverterRustBuffer<List<Ty>> {
    override fun read(buf: ByteBuffer): List<Ty> {
        val len = buf.getInt()
        return List<Ty>(len) {
            FfiConverterTypeTy.read(buf)
        }
    }

    override fun allocationSize(value: List<Ty>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeTy.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Ty>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeTy.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceOptionalTypeFieldElement: FfiConverterRustBuffer<List<FieldElement?>> {
    override fun read(buf: ByteBuffer): List<FieldElement?> {
        val len = buf.getInt()
        return List<FieldElement?>(len) {
            FfiConverterOptionalTypeFieldElement.read(buf)
        }
    }

    override fun allocationSize(value: List<FieldElement?>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterOptionalTypeFieldElement.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FieldElement?>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterOptionalTypeFieldElement.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeFieldElement: FfiConverterRustBuffer<List<FieldElement>> {
    override fun read(buf: ByteBuffer): List<FieldElement> {
        val len = buf.getInt()
        return List<FieldElement>(len) {
            FfiConverterTypeFieldElement.read(buf)
        }
    }

    override fun allocationSize(value: List<FieldElement>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeFieldElement.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<FieldElement>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeFieldElement.write(it, buf)
        }
    }
}




/**
 * @suppress
 */
public object FfiConverterSequenceTypeU256: FfiConverterRustBuffer<List<U256>> {
    override fun read(buf: ByteBuffer): List<U256> {
        val len = buf.getInt()
        return List<U256>(len) {
            FfiConverterTypeU256.read(buf)
        }
    }

    override fun allocationSize(value: List<U256>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeU256.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<U256>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeU256.write(it, buf)
        }
    }
}



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias FieldElement = kotlin.String
public typealias FfiConverterTypeFieldElement = FfiConverterString



/**
 * Typealias from the type name used in the UDL file to the builtin type.  This
 * is needed because the UDL type name is used in function/method signatures.
 * It's also what we have an external type that references a custom type.
 */
public typealias U256 = kotlin.String
public typealias FfiConverterTypeU256 = FfiConverterString

