// generated by diplomat-tool
import { DojoError } from "./DojoError.mjs"
import { FieldElement } from "./FieldElement.mjs"
import { Signature } from "./Signature.mjs"
import { VerifyingKey } from "./VerifyingKey.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const SigningKey_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.SigningKey_destroy(ptr);
});

/**
 * Represents a signing key for Starknet transactions
 */
export class SigningKey {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("SigningKey is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            SigningKey_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a new signing key from a secret scalar
     */
    static new_(secretScalar) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const secretScalarSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.sliceWrapper(wasm, diplomatRuntime.DiplomatBuf.str8(wasm, secretScalar)));
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.SigningKey_new(diplomatReceive.buffer, secretScalarSlice.ptr);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return new SigningKey(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    /**
     * Generates a new random signing key
     */
    static fromRandom() {

        const result = wasm.SigningKey_from_random();

        try {
            return new SigningKey(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Returns the secret scalar of the signing key
     */
    secretScalar() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.SigningKey_secret_scalar(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Signs a message hash
     */
    sign(hash) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.SigningKey_sign(diplomatReceive.buffer, this.ffiValue, hash.ffiValue);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return new Signature(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }

        finally {
            diplomatReceive.free();
        }
    }

    /**
     * Returns the verifying key
     */
    verifyingKey() {

        const result = wasm.SigningKey_verifying_key(this.ffiValue);

        try {
            return new VerifyingKey(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}