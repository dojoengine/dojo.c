// generated by diplomat-tool
import { CallList } from "./CallList.mjs"
import { DojoError } from "./DojoError.mjs"
import { FieldElement } from "./FieldElement.mjs"
import { Provider } from "./Provider.mjs"
import { SigningKey } from "./SigningKey.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const Account_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.Account_destroy(ptr);
});

/**
 * Starknet account for signing and executing transactions
 */
export class Account {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("Account is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            Account_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a new account
     */
    static new_(provider, signer, address, chainId) {

        const result = wasm.Account_new(provider.ffiValue, signer.ffiValue, address.ffiValue, chainId.ffiValue);

        try {
            return new Account(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Gets the account address
     */
    address() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.Account_address(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Gets the chain ID
     */
    chainId() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.Account_chain_id(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Executes a transaction with the given calls
     */
    execute(calls) {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);

        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);


        const result = wasm.Account_execute(diplomatReceive.buffer, this.ffiValue, calls.ffiValue, write.buffer);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return write.readString8();
        }

        finally {
            diplomatReceive.free();
            write.free();
        }
    }

    /**
     * Gets the nonce for the account
     */
    nonce() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 9, 8, true);


        const result = wasm.Account_nonce(diplomatReceive.buffer, this.ffiValue);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return (new BigUint64Array(wasm.memory.buffer, diplomatReceive.buffer, 1))[0];
        }

        finally {
            diplomatReceive.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}