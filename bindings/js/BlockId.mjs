// generated by diplomat-tool
import { BlockTag } from "./BlockTag.mjs"
import { FieldElement } from "./FieldElement.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const BlockId_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.BlockId_destroy(ptr);
});

/**
 * Block identifier (hash, number, or tag)
 */
export class BlockId {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("BlockId is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            BlockId_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a BlockId from a block hash
     */
    static fromHash(hash) {

        const result = wasm.BlockId_from_hash(hash.ffiValue);

        try {
            return new BlockId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Creates a BlockId from a block number
     */
    static fromNumber(number) {

        const result = wasm.BlockId_from_number(number);

        try {
            return new BlockId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    /**
     * Creates a BlockId from a block tag
     */
    static fromTag(tag) {

        const result = wasm.BlockId_from_tag(tag.ffiValue);

        try {
            return new BlockId(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}