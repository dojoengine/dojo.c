// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";



export class ErrorType {
    #value = undefined;

    static #values = new Map([
        ["ClientError", 0],
        ["ParseError", 1],
        ["EntityError", 2],
        ["QueryError", 3],
        ["SubscriptionError", 4],
        ["TransactionError", 5],
        ["AccountError", 6],
        ["SigningError", 7],
        ["ProviderError", 8],
        ["StorageError", 9],
        ["ControllerError", 10],
        ["InvalidInput", 11],
        ["RuntimeError", 12]
    ]);

    static getAllEntries() {
        return ErrorType.#values.entries();
    }

    #internalConstructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return this;
            }
            return ErrorType.#objectValues[arguments[1]];
        }

        if (value instanceof ErrorType) {
            return value;
        }

        let intVal = ErrorType.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal != null) {
            return ErrorType.#objectValues[intVal];
        }

        throw TypeError(value + " is not a ErrorType and does not correspond to any of its enumerator values.");
    }

    /** @internal */
    static fromValue(value) {
        return new ErrorType(value);
    }

    get value(){
        return [...ErrorType.#values.keys()][this.#value];
    }

    /** @internal */
    get ffiValue(){
        return this.#value;
    }
    static #objectValues = [
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 0),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 3),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 4),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 5),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 6),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 7),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 8),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 9),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 10),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 11),
        new ErrorType(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 12),
    ];

    static ClientError = ErrorType.#objectValues[0];
    static ParseError = ErrorType.#objectValues[1];
    static EntityError = ErrorType.#objectValues[2];
    static QueryError = ErrorType.#objectValues[3];
    static SubscriptionError = ErrorType.#objectValues[4];
    static TransactionError = ErrorType.#objectValues[5];
    static AccountError = ErrorType.#objectValues[6];
    static SigningError = ErrorType.#objectValues[7];
    static ProviderError = ErrorType.#objectValues[8];
    static StorageError = ErrorType.#objectValues[9];
    static ControllerError = ErrorType.#objectValues[10];
    static InvalidInput = ErrorType.#objectValues[11];
    static RuntimeError = ErrorType.#objectValues[12];


    constructor(value) {
        return this.#internalConstructor(...arguments)
    }
}