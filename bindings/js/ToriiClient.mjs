// generated by diplomat-tool
import { DojoError } from "./DojoError.mjs"
import { FieldElement } from "./FieldElement.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const ToriiClient_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.ToriiClient_destroy(ptr);
});

/**
 * Opaque handle to a Torii client instance
 */
export class ToriiClient {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("ToriiClient is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            ToriiClient_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    /**
     * Creates a new Torii client instance
     */
    static new_(toriiUrl) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const toriiUrlSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.sliceWrapper(wasm, diplomatRuntime.DiplomatBuf.str8(wasm, toriiUrl)));
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);


        const result = wasm.ToriiClient_new(diplomatReceive.buffer, toriiUrlSlice.ptr);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return new ToriiClient(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
        }
    }

    /**
     * Gets information about the Torii server
     */
    info() {
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);

        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);


        const result = wasm.ToriiClient_info(diplomatReceive.buffer, this.ffiValue, write.buffer);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return write.readString8();
        }

        finally {
            diplomatReceive.free();
            write.free();
        }
    }

    /**
     * Publishes a message to the network
     */
    publishMessage(messageJson, signatureR, signatureS, worldAddress) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const messageJsonSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.sliceWrapper(wasm, diplomatRuntime.DiplomatBuf.str8(wasm, messageJson)));
        const diplomatReceive = new diplomatRuntime.DiplomatReceiveBuf(wasm, 5, 4, true);

        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);


        const result = wasm.ToriiClient_publish_message(diplomatReceive.buffer, this.ffiValue, messageJsonSlice.ptr, signatureR.ffiValue, signatureS.ffiValue, worldAddress.ffiValue, write.buffer);

        try {
            if (!diplomatReceive.resultFlag) {
                const cause = new DojoError(diplomatRuntime.internalConstructor, diplomatRuntime.ptrRead(wasm, diplomatReceive.buffer), []);
                throw new globalThis.Error('DojoError: ' + cause.toString(), { cause });
            }
            return write.readString8();
        }

        finally {
            functionCleanupArena.free();

            diplomatReceive.free();
            write.free();
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}