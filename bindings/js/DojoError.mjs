// generated by diplomat-tool
import { ErrorType } from "./ErrorType.mjs"
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";

const DojoError_box_destroy_registry = new FinalizationRegistry((ptr) => {
    wasm.DojoError_destroy(ptr);
});

/**
 * Error types for Dojo operations
 */
export class DojoError {
    // Internal ptr reference:
    #ptr = null;

    // Lifetimes are only to keep dependencies alive.
    // Since JS won't garbage collect until there are no incoming edges.
    #selfEdge = [];

    #internalConstructor(symbol, ptr, selfEdge) {
        if (symbol !== diplomatRuntime.internalConstructor) {
            console.error("DojoError is an Opaque type. You cannot call its constructor.");
            return;
        }
        this.#ptr = ptr;
        this.#selfEdge = selfEdge;

        // Are we being borrowed? If not, we can register.
        if (this.#selfEdge.length === 0) {
            DojoError_box_destroy_registry.register(this, this.#ptr);
        }

        return this;
    }
    /** @internal */
    get ffiValue() {
        return this.#ptr;
    }


    static new_(errorType, message) {
        let functionCleanupArena = new diplomatRuntime.CleanupArena();

        const messageSlice = functionCleanupArena.alloc(diplomatRuntime.DiplomatBuf.sliceWrapper(wasm, diplomatRuntime.DiplomatBuf.str8(wasm, message)));

        const result = wasm.DojoError_new(errorType.ffiValue, messageSlice.ptr);

        try {
            return new DojoError(diplomatRuntime.internalConstructor, result, []);
        }

        finally {
            functionCleanupArena.free();

        }
    }

    /**
     * Gets the error message
     */
    message() {
        const write = new diplomatRuntime.DiplomatWriteBuf(wasm);

    wasm.DojoError_message(this.ffiValue, write.buffer);

        try {
            return write.readString8();
        }

        finally {
            write.free();
        }
    }

    /**
     * Gets the error type
     */
    errorType() {

        const result = wasm.DojoError_error_type(this.ffiValue);

        try {
            return new ErrorType(diplomatRuntime.internalConstructor, result);
        }

        finally {
        }
    }

    constructor(symbol, ptr, selfEdge) {
        return this.#internalConstructor(...arguments)
    }
}