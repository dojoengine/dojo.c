// generated by diplomat-tool
import wasm from "./diplomat-wasm.mjs";
import * as diplomatRuntime from "./diplomat-runtime.mjs";



/**
 * Comparison operators for member clauses
 */
export class ComparisonOperator {
    #value = undefined;

    static #values = new Map([
        ["Eq", 0],
        ["Neq", 1],
        ["Gt", 2],
        ["Gte", 3],
        ["Lt", 4],
        ["Lte", 5],
        ["In", 6],
        ["NotIn", 7],
        ["Contains", 8],
        ["ContainsAll", 9],
        ["ContainsAny", 10],
        ["ArrayLengthEq", 11],
        ["ArrayLengthGt", 12],
        ["ArrayLengthLt", 13]
    ]);

    static getAllEntries() {
        return ComparisonOperator.#values.entries();
    }

    #internalConstructor(value) {
        if (arguments.length > 1 && arguments[0] === diplomatRuntime.internalConstructor) {
            // We pass in two internalConstructor arguments to create *new*
            // instances of this type, otherwise the enums are treated as singletons.
            if (arguments[1] === diplomatRuntime.internalConstructor ) {
                this.#value = arguments[2];
                return this;
            }
            return ComparisonOperator.#objectValues[arguments[1]];
        }

        if (value instanceof ComparisonOperator) {
            return value;
        }

        let intVal = ComparisonOperator.#values.get(value);

        // Nullish check, checks for null or undefined
        if (intVal != null) {
            return ComparisonOperator.#objectValues[intVal];
        }

        throw TypeError(value + " is not a ComparisonOperator and does not correspond to any of its enumerator values.");
    }

    /** @internal */
    static fromValue(value) {
        return new ComparisonOperator(value);
    }

    get value(){
        return [...ComparisonOperator.#values.keys()][this.#value];
    }

    /** @internal */
    get ffiValue(){
        return this.#value;
    }
    static #objectValues = [
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 0),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 1),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 2),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 3),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 4),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 5),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 6),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 7),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 8),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 9),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 10),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 11),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 12),
        new ComparisonOperator(diplomatRuntime.internalConstructor, diplomatRuntime.internalConstructor, 13),
    ];

    static Eq = ComparisonOperator.#objectValues[0];
    static Neq = ComparisonOperator.#objectValues[1];
    static Gt = ComparisonOperator.#objectValues[2];
    static Gte = ComparisonOperator.#objectValues[3];
    static Lt = ComparisonOperator.#objectValues[4];
    static Lte = ComparisonOperator.#objectValues[5];
    static In = ComparisonOperator.#objectValues[6];
    static NotIn = ComparisonOperator.#objectValues[7];
    static Contains = ComparisonOperator.#objectValues[8];
    static ContainsAll = ComparisonOperator.#objectValues[9];
    static ContainsAny = ComparisonOperator.#objectValues[10];
    static ArrayLengthEq = ComparisonOperator.#objectValues[11];
    static ArrayLengthGt = ComparisonOperator.#objectValues[12];
    static ArrayLengthLt = ComparisonOperator.#objectValues[13];


    constructor(value) {
        return this.#internalConstructor(...arguments)
    }
}