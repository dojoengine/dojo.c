// This file was autogenerated by some hot garbage in the `uniffi-bindgen-react-native` crate.
// Trust me, you don't want to mess with it!
#include "dojo.hpp"

#include "UniffiJsiTypes.h"
#include <stdexcept>
#include <map>
#include <utility>
#include <iostream>
#include <thread>

namespace react = facebook::react;
namespace jsi = facebook::jsi;

// Calling into Rust.
extern "C" {
    typedef void
    (*UniffiRustFutureContinuationCallback)(
    uint64_t data, 
    int8_t poll_result
    );
    typedef void
    (*UniffiForeignFutureDroppedCallback)(
    uint64_t handle
    );
    typedef void
    (*UniffiCallbackInterfaceFree)(
    uint64_t handle
    );
    typedef uint64_t
    (*UniffiCallbackInterfaceClone)(
    uint64_t handle
    );typedef struct UniffiForeignFutureDroppedCallbackStruct {
        uint64_t handle;
        UniffiForeignFutureDroppedCallback free;
    } UniffiForeignFutureDroppedCallbackStruct;typedef struct UniffiForeignFutureResultU8 {
        uint8_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultU8;
    typedef void
    (*UniffiForeignFutureCompleteU8)(
    uint64_t callback_data, 
    UniffiForeignFutureResultU8 result
    );typedef struct UniffiForeignFutureResultI8 {
        int8_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultI8;
    typedef void
    (*UniffiForeignFutureCompleteI8)(
    uint64_t callback_data, 
    UniffiForeignFutureResultI8 result
    );typedef struct UniffiForeignFutureResultU16 {
        uint16_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultU16;
    typedef void
    (*UniffiForeignFutureCompleteU16)(
    uint64_t callback_data, 
    UniffiForeignFutureResultU16 result
    );typedef struct UniffiForeignFutureResultI16 {
        int16_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultI16;
    typedef void
    (*UniffiForeignFutureCompleteI16)(
    uint64_t callback_data, 
    UniffiForeignFutureResultI16 result
    );typedef struct UniffiForeignFutureResultU32 {
        uint32_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultU32;
    typedef void
    (*UniffiForeignFutureCompleteU32)(
    uint64_t callback_data, 
    UniffiForeignFutureResultU32 result
    );typedef struct UniffiForeignFutureResultI32 {
        int32_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultI32;
    typedef void
    (*UniffiForeignFutureCompleteI32)(
    uint64_t callback_data, 
    UniffiForeignFutureResultI32 result
    );typedef struct UniffiForeignFutureResultU64 {
        uint64_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultU64;
    typedef void
    (*UniffiForeignFutureCompleteU64)(
    uint64_t callback_data, 
    UniffiForeignFutureResultU64 result
    );typedef struct UniffiForeignFutureResultI64 {
        int64_t return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultI64;
    typedef void
    (*UniffiForeignFutureCompleteI64)(
    uint64_t callback_data, 
    UniffiForeignFutureResultI64 result
    );typedef struct UniffiForeignFutureResultF32 {
        float return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultF32;
    typedef void
    (*UniffiForeignFutureCompleteF32)(
    uint64_t callback_data, 
    UniffiForeignFutureResultF32 result
    );typedef struct UniffiForeignFutureResultF64 {
        double return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultF64;
    typedef void
    (*UniffiForeignFutureCompleteF64)(
    uint64_t callback_data, 
    UniffiForeignFutureResultF64 result
    );typedef struct UniffiForeignFutureResultRustBuffer {
        RustBuffer return_value;
        RustCallStatus call_status;
    } UniffiForeignFutureResultRustBuffer;
    typedef void
    (*UniffiForeignFutureCompleteRustBuffer)(
    uint64_t callback_data, 
    UniffiForeignFutureResultRustBuffer result
    );typedef struct UniffiForeignFutureResultVoid {
        RustCallStatus call_status;
    } UniffiForeignFutureResultVoid;
    typedef void
    (*UniffiForeignFutureCompleteVoid)(
    uint64_t callback_data, 
    UniffiForeignFutureResultVoid result
    );
    typedef void
    (*UniffiCallbackInterfaceEntityUpdateCallbackMethod0)(
    uint64_t uniffi_handle, 
    RustBuffer entity, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceEntityUpdateCallbackMethod1)(
    uint64_t uniffi_handle, 
    RustBuffer error, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceEventUpdateCallbackMethod0)(
    uint64_t uniffi_handle, 
    RustBuffer event, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceEventUpdateCallbackMethod1)(
    uint64_t uniffi_handle, 
    RustBuffer error, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0)(
    uint64_t uniffi_handle, 
    RustBuffer balance, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1)(
    uint64_t uniffi_handle, 
    RustBuffer error, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTokenUpdateCallbackMethod0)(
    uint64_t uniffi_handle, 
    RustBuffer token, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTokenUpdateCallbackMethod1)(
    uint64_t uniffi_handle, 
    RustBuffer error, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTransactionUpdateCallbackMethod0)(
    uint64_t uniffi_handle, 
    RustBuffer transaction, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );
    typedef void
    (*UniffiCallbackInterfaceTransactionUpdateCallbackMethod1)(
    uint64_t uniffi_handle, 
    RustBuffer error, 
    void * uniffi_out_return, RustCallStatus* rust_call_status
    );typedef struct UniffiVTableCallbackInterfaceEntityUpdateCallback {
        UniffiCallbackInterfaceFree uniffi_free;
        UniffiCallbackInterfaceClone uniffi_clone;
        UniffiCallbackInterfaceEntityUpdateCallbackMethod0 on_update;
        UniffiCallbackInterfaceEntityUpdateCallbackMethod1 on_error;
    } UniffiVTableCallbackInterfaceEntityUpdateCallback;typedef struct UniffiVTableCallbackInterfaceEventUpdateCallback {
        UniffiCallbackInterfaceFree uniffi_free;
        UniffiCallbackInterfaceClone uniffi_clone;
        UniffiCallbackInterfaceEventUpdateCallbackMethod0 on_update;
        UniffiCallbackInterfaceEventUpdateCallbackMethod1 on_error;
    } UniffiVTableCallbackInterfaceEventUpdateCallback;typedef struct UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback {
        UniffiCallbackInterfaceFree uniffi_free;
        UniffiCallbackInterfaceClone uniffi_clone;
        UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0 on_update;
        UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1 on_error;
    } UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback;typedef struct UniffiVTableCallbackInterfaceTokenUpdateCallback {
        UniffiCallbackInterfaceFree uniffi_free;
        UniffiCallbackInterfaceClone uniffi_clone;
        UniffiCallbackInterfaceTokenUpdateCallbackMethod0 on_update;
        UniffiCallbackInterfaceTokenUpdateCallbackMethod1 on_error;
    } UniffiVTableCallbackInterfaceTokenUpdateCallback;typedef struct UniffiVTableCallbackInterfaceTransactionUpdateCallback {
        UniffiCallbackInterfaceFree uniffi_free;
        UniffiCallbackInterfaceClone uniffi_clone;
        UniffiCallbackInterfaceTransactionUpdateCallbackMethod0 on_update;
        UniffiCallbackInterfaceTransactionUpdateCallbackMethod1 on_error;
    } UniffiVTableCallbackInterfaceTransactionUpdateCallback;
    uint64_t uniffi_dojo_uniffi_fn_clone_toriiclient(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void uniffi_dojo_uniffi_fn_free_toriiclient(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_constructor_toriiclient_new(
        RustBuffer torii_url, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(
        RustBuffer torii_url, 
        uint64_t max_message_size, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_achievements(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_activities(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    void uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(
        uint64_t ptr, 
        uint64_t subscription_id, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_contracts(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_controllers(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_entities(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(
        uint64_t ptr, 
        RustBuffer message, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(
        uint64_t ptr, 
        RustBuffer messages, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_sql(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(
        uint64_t ptr, 
        RustBuffer clause, 
        RustBuffer world_addresses, 
        uint64_t callback, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(
        uint64_t ptr, 
        RustBuffer keys, 
        uint64_t callback, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(
        uint64_t ptr, 
        RustBuffer contract_addresses, 
        RustBuffer account_addresses, 
        RustBuffer token_ids, 
        uint64_t callback, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(
        uint64_t ptr, 
        RustBuffer contract_addresses, 
        RustBuffer token_ids, 
        uint64_t callback, 
        RustCallStatus *uniffi_out_err
    );
    uint64_t uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(
        uint64_t ptr, 
        RustBuffer filter, 
        uint64_t callback, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_tokens(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_transactions(
        uint64_t ptr, 
        RustBuffer query, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer uniffi_dojo_uniffi_fn_method_toriiclient_worlds(
        uint64_t ptr, 
        RustBuffer world_addresses, 
        RustCallStatus *uniffi_out_err
    );
    void uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(
        UniffiVTableCallbackInterfaceEntityUpdateCallback * vtable
    );
    void uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(
        UniffiVTableCallbackInterfaceEventUpdateCallback * vtable
    );
    void uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(
        UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback * vtable
    );
    void uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(
        UniffiVTableCallbackInterfaceTokenUpdateCallback * vtable
    );
    void uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(
        UniffiVTableCallbackInterfaceTransactionUpdateCallback * vtable
    );
    RustBuffer ffi_dojo_uniffi_rustbuffer_alloc(
        uint64_t size, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer ffi_dojo_uniffi_rustbuffer_from_bytes(
        ForeignBytes bytes, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rustbuffer_free(
        RustBuffer buf, 
        RustCallStatus *uniffi_out_err
    );
    RustBuffer ffi_dojo_uniffi_rustbuffer_reserve(
        RustBuffer buf, 
        uint64_t additional, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_u8(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_u8(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_u8(
        uint64_t handle
    );
    uint8_t ffi_dojo_uniffi_rust_future_complete_u8(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_i8(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_i8(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_i8(
        uint64_t handle
    );
    int8_t ffi_dojo_uniffi_rust_future_complete_i8(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_u16(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_u16(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_u16(
        uint64_t handle
    );
    uint16_t ffi_dojo_uniffi_rust_future_complete_u16(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_i16(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_i16(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_i16(
        uint64_t handle
    );
    int16_t ffi_dojo_uniffi_rust_future_complete_i16(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_u32(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_u32(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_u32(
        uint64_t handle
    );
    uint32_t ffi_dojo_uniffi_rust_future_complete_u32(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_i32(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_i32(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_i32(
        uint64_t handle
    );
    int32_t ffi_dojo_uniffi_rust_future_complete_i32(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_u64(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_u64(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_u64(
        uint64_t handle
    );
    uint64_t ffi_dojo_uniffi_rust_future_complete_u64(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_i64(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_i64(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_i64(
        uint64_t handle
    );
    int64_t ffi_dojo_uniffi_rust_future_complete_i64(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_f32(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_f32(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_f32(
        uint64_t handle
    );
    float ffi_dojo_uniffi_rust_future_complete_f32(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_f64(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_f64(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_f64(
        uint64_t handle
    );
    double ffi_dojo_uniffi_rust_future_complete_f64(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_rust_buffer(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_rust_buffer(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_rust_buffer(
        uint64_t handle
    );
    RustBuffer ffi_dojo_uniffi_rust_future_complete_rust_buffer(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    void ffi_dojo_uniffi_rust_future_poll_void(
        uint64_t handle, 
        UniffiRustFutureContinuationCallback callback, 
        uint64_t callback_data
    );
    void ffi_dojo_uniffi_rust_future_cancel_void(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_free_void(
        uint64_t handle
    );
    void ffi_dojo_uniffi_rust_future_complete_void(
        uint64_t handle, 
        RustCallStatus *uniffi_out_err
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_achievements(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_activities(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_contracts(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_controllers(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_entities(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_sql(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_tokens(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_transactions(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_toriiclient_worlds(
    );
    uint16_t uniffi_dojo_uniffi_checksum_constructor_toriiclient_new(
    );
    uint16_t uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update(
    );
    uint16_t uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error(
    );
    uint32_t ffi_dojo_uniffi_uniffi_contract_version(
    );
}


namespace uniffi::dojo {
template <typename T> struct Bridging;

using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <typename T> struct Bridging<ReferenceHolder<T>> {
  static jsi::Value jsNew(jsi::Runtime &rt) {
    auto holder = jsi::Object(rt);
    return holder;
  }
  static T fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker,
                  const jsi::Value &value) {
    auto obj = value.asObject(rt);
    if (obj.hasProperty(rt, "pointee")) {
      auto pointee = obj.getProperty(rt, "pointee");
      return uniffi::dojo::Bridging<T>::fromJs(rt, callInvoker, pointee);
    }
    throw jsi::JSError(
      rt,
      "Expected ReferenceHolder to have a pointee property. This is likely a bug in uniffi-bindgen-react-native"
    );
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustBuffer> {
  static RustBuffer rustbuffer_alloc(int32_t size) {
      RustCallStatus status = { UNIFFI_CALL_STATUS_OK };
      return ffi_dojo_uniffi_rustbuffer_alloc(
          size,
          &status
      );
  }

  static void rustbuffer_free(RustBuffer buf) {
    RustCallStatus status = { UNIFFI_CALL_STATUS_OK };
    ffi_dojo_uniffi_rustbuffer_free(
        buf,
        &status
    );
  }

  static RustBuffer rustbuffer_from_bytes(ForeignBytes bytes) {
    RustCallStatus status = { UNIFFI_CALL_STATUS_OK };
    return ffi_dojo_uniffi_rustbuffer_from_bytes(
      bytes,
      &status
    );
  }

  static RustBuffer fromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                           const jsi::Value &value) {
    try {
      auto buffer = uniffi_jsi::Bridging<jsi::ArrayBuffer>::value_to_arraybuffer(rt, value);
      auto bytes = ForeignBytes{
          .len = static_cast<int32_t>(buffer.length(rt)),
          .data = buffer.data(rt),
      };

      // This buffer is constructed from foreign bytes. Rust scaffolding copies
      // the bytes, to make the RustBuffer.
      auto buf = rustbuffer_from_bytes(bytes);
      // Once it leaves this function, the buffer is immediately passed back
      // into Rust, where it's used to deserialize into the Rust versions of the
      // arguments. At that point, the copy is destroyed.
      return buf;
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }

  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker>,
                         RustBuffer buf) {
    // We need to make a copy of the bytes from Rust's memory space into
    // Javascripts memory space. We need to do this because the two languages
    // manages memory very differently: a garbage collector needs to track all
    // the memory at runtime, Rust is doing it all closer to compile time.
    uint8_t *bytes = new uint8_t[buf.len];
    std::memcpy(bytes, buf.data, buf.len);

    // Construct an ArrayBuffer with copy of the bytes from the RustBuffer.
    auto payload = std::make_shared<uniffi_jsi::CMutableBuffer>(
        uniffi_jsi::CMutableBuffer((uint8_t *)bytes, buf.len));
    auto arrayBuffer = jsi::ArrayBuffer(rt, payload);

    // Once we have a Javascript version, we no longer need the Rust version, so
    // we can call into Rust to tell it it's okay to free that memory.
    rustbuffer_free(buf);

    // Finally, return the ArrayBuffer.
    return uniffi_jsi::Bridging<jsi::ArrayBuffer>::arraybuffer_to_value(rt, arrayBuffer);;
  }
};

} // namespace uniffi::dojo

namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<RustCallStatus> {
  static jsi::Value jsSuccess(jsi::Runtime &rt) {
    auto statusObject = jsi::Object(rt);
    statusObject.setProperty(rt, "code", jsi::Value(rt, UNIFFI_CALL_STATUS_OK));
    return statusObject;
  }
  static RustCallStatus rustSuccess(jsi::Runtime &rt) {
    return {UNIFFI_CALL_STATUS_OK};
  }
  static void copyIntoJs(jsi::Runtime &rt,
                         std::shared_ptr<CallInvoker> callInvoker,
                         const RustCallStatus status,
                         const jsi::Value &jsStatus) {
    auto statusObject = jsStatus.asObject(rt);
    if (status.error_buf.data != nullptr) {
      auto rbuf = Bridging<RustBuffer>::toJs(rt, callInvoker,
                                                         status.error_buf);
      statusObject.setProperty(rt, "errorBuf", rbuf);
    }
    if (status.code != UNIFFI_CALL_STATUS_OK) {
      auto code =
          uniffi_jsi::Bridging<uint8_t>::toJs(rt, callInvoker, status.code);
      statusObject.setProperty(rt, "code", code);
    }
  }

  static RustCallStatus fromJs(jsi::Runtime &rt,
                               std::shared_ptr<CallInvoker> invoker,
                               const jsi::Value &jsStatus) {
    RustCallStatus status;
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status.error_buf =
          Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status.code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
    return status;
  }

  static void copyFromJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> invoker,
                         const jsi::Value &jsStatus, RustCallStatus *status) {
    auto statusObject = jsStatus.asObject(rt);
    if (statusObject.hasProperty(rt, "errorBuf")) {
      auto rbuf = statusObject.getProperty(rt, "errorBuf");
      status->error_buf =
          Bridging<RustBuffer>::fromJs(rt, invoker, rbuf);
    }
    if (statusObject.hasProperty(rt, "code")) {
      auto code = statusObject.getProperty(rt, "code");
      status->code = uniffi_jsi::Bridging<uint8_t>::fromJs(rt, invoker, code);
    }
  }
};

} // namespace uniffi::dojo
// In other uniffi bindings, it is assumed that the foreign language holds on
// to the vtable, which the Rust just gets a pointer to.
// Here, we need to hold on to them, but also be able to clear them at just the
// right time so we can support hot-reloading.
namespace uniffi::dojo::registry {
    template <typename T>
    class VTableHolder {
    public:
        T vtable;
        VTableHolder(T v) : vtable(v) {}
    };

    // Mutex to bind the storage and setting of vtable together.
    // We declare it here, but the lock is taken by callers of the putTable
    // method who are also sending a pointer to Rust.
    static std::mutex vtableMutex;

    // Registry to hold all vtables so they persist even when JS objects are GC'd.
    // The only reason this exists is to prevent a dangling pointer in the
    // Rust machinery: i.e. we don't need to access or write to this registry
    // after startup.
    // Registry to hold all vtables so they persist even when JS objects are GC'd.
    // Maps string identifiers to vtable holders using type erasure
    static std::unordered_map<std::string, std::shared_ptr<void>> vtableRegistry;

    // Add a vtable to the registry with an identifier
    template <typename T>
    static T* putTable(std::string_view identifier, T vtable) {
        auto holder = std::make_shared<VTableHolder<T>>(vtable);
        // Store the raw pointer to the vtable before type erasure
        T* rawPtr = &(holder->vtable);
        // Store the holder using type erasure with the string identifier
        vtableRegistry[std::string(identifier)] = std::shared_ptr<void>(holder);
        return rawPtr;
    }

    // Clear the registry.
    //
    // Conceptually, this is called after teardown of the module (i.e. after
    // teardown of the jsi::Runtime). However, because Rust is dropping callbacks
    // because the Runtime is being torn down, we must keep the registry intact
    // until after the runtime goes away.
    //
    // Therefore, in practice we should call this when the next runtime is
    // being stood up.
    static void clearRegistry() {
        std::lock_guard<std::mutex> lock(vtableMutex);
        vtableRegistry.clear();
    }
} // namespace uniffi::dojo::registry

// This calls into Rust.
    // Implementation of callback function calling from Rust to JS RustFutureContinuationCallback

// Callback function: uniffi::dojo::cb::rustfuturecontinuationcallback::UniffiRustFutureContinuationCallback
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::rustfuturecontinuationcallback {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, int8_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_data
            ,int8_t rs_pollResult) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_data = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_data);
        auto js_pollResult = uniffi_jsi::Bridging<int8_t>::toJs(rt, callInvoker, rs_pollResult);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_data, js_pollResult
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiRustFutureContinuationCallback: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_data, int8_t rs_pollResult) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_data, 
            rs_pollResult);
    }

    static UniffiRustFutureContinuationCallback
    makeCallbackFunction( // uniffi::dojo::cb::rustfuturecontinuationcallback
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_data, int8_t rs_pollResult) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_data
                    , rs_pollResult](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_data
                        , rs_pollResult);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::rustfuturecontinuationcallback
    // Implementation of callback function calling from JS to Rust ForeignFutureDroppedCallback,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureDroppedCallback> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureDroppedCallback rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureDroppedCallback"),
        1,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureDroppedCallback func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
    // Implementation of free callback function CallbackInterfaceFree


// Callback function: uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceFree: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceFree
    makeCallbackFunction( // uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free

// Callback function: uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceFree: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceFree
    makeCallbackFunction( // uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free

// Callback function: uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceFree: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceFree
    makeCallbackFunction( // uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free

// Callback function: uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceFree: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceFree
    makeCallbackFunction( // uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free

// Callback function: uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free::UniffiCallbackInterfaceFree
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceFree: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceFree
    makeCallbackFunction( // uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free
    // Implementation of callback function calling from Rust to JS CallbackInterfaceClone

// Callback function: uniffi::dojo::cb::callbackinterfaceclone::UniffiCallbackInterfaceClone
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfaceclone {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_handle) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_handle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_handle);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_handle
            );

            

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceClone: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_handle) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_handle);
    }

    static UniffiCallbackInterfaceClone
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfaceclone
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_handle) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_handle](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_handle);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                
                callInvoker->invokeNonBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfaceclone
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureDroppedCallbackStruct> {
  static UniffiForeignFutureDroppedCallbackStruct fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureDroppedCallbackStruct");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureDroppedCallbackStruct rsObject;

    // Create the vtable from the js callbacks.
    rsObject.handle = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "handle")
      );
    rsObject.free = uniffi::dojo::cb::foreignfuturedroppedcallback::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "free")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultU8> {
  static UniffiForeignFutureResultU8 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultU8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultU8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint8_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteU8,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU8> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteU8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU8"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteU8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultU8>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultI8> {
  static UniffiForeignFutureResultI8 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultI8");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultI8 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int8_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteI8,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI8> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteI8 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI8"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteI8 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultI8>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultU16> {
  static UniffiForeignFutureResultU16 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultU16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultU16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint16_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteU16,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU16> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteU16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU16"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteU16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultU16>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultI16> {
  static UniffiForeignFutureResultI16 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultI16");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultI16 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int16_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteI16,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI16> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteI16 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI16"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteI16 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultI16>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultU32> {
  static UniffiForeignFutureResultU32 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultU32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultU32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint32_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteU32,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU32> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteU32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU32"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteU32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultU32>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultI32> {
  static UniffiForeignFutureResultI32 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultI32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultI32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int32_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteI32,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI32> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteI32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI32"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteI32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultI32>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultU64> {
  static UniffiForeignFutureResultU64 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultU64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultU64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<uint64_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteU64,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteU64> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteU64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteU64"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteU64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultU64>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultI64> {
  static UniffiForeignFutureResultI64 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultI64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultI64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<int64_t>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteI64,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteI64> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteI64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteI64"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteI64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultI64>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultF32> {
  static UniffiForeignFutureResultF32 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultF32");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultF32 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<float>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteF32,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF32> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteF32 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF32"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteF32 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultF32>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultF64> {
  static UniffiForeignFutureResultF64 fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultF64");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultF64 rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi_jsi::Bridging<double>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteF64,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteF64> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteF64 rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteF64"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteF64 func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultF64>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultRustBuffer> {
  static UniffiForeignFutureResultRustBuffer fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultRustBuffer");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultRustBuffer rsObject;

    // Create the vtable from the js callbacks.
    rsObject.return_value = uniffi::dojo::Bridging<RustBuffer>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "returnValue")
      );
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteRustBuffer,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteRustBuffer> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteRustBuffer rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteRustBuffer"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteRustBuffer func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultRustBuffer>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureResultVoid> {
  static UniffiForeignFutureResultVoid fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiForeignFutureResultVoid");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiForeignFutureResultVoid rsObject;

    // Create the vtable from the js callbacks.
    rsObject.call_status = uniffi::dojo::Bridging<RustCallStatus>::fromJs(
        rt, callInvoker,
        jsObject.getProperty(rt, "callStatus")
      );

    return rsObject;
  }
};

} // namespace uniffi::dojo
    // Implementation of callback function calling from JS to Rust ForeignFutureCompleteVoid,
    // passed from Rust to JS as part of async callbacks.
namespace uniffi::dojo {
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiForeignFutureCompleteVoid> {
  static jsi::Value toJs(jsi::Runtime &rt, std::shared_ptr<CallInvoker> callInvoker, UniffiForeignFutureCompleteVoid rsCallback) {
    return jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "--ForeignFutureCompleteVoid"),
        2,
        [rsCallback, callInvoker](
            jsi::Runtime &rt,
            const jsi::Value &thisValue,
            const jsi::Value *arguments,
            size_t count) -> jsi::Value
        {
            return intoRust(rt, callInvoker, thisValue, arguments, count, rsCallback);
        }
    );
  }

  static jsi::Value intoRust(
      jsi::Runtime &rt,
      std::shared_ptr<CallInvoker> callInvoker,
      const jsi::Value &thisValue,
      const jsi::Value *args,
      size_t count,
      UniffiForeignFutureCompleteVoid func) {
    // Convert the arguments into the Rust, with Bridging<T>::fromJs,
    // then call the rs_callback with those arguments.
        func(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<UniffiForeignFutureResultVoid>::fromJs(rt, callInvoker, args[1])
        );

        
        return jsi::Value::undefined();
  }
};
} // namespace uniffi::dojo
    // Implementation of callback function calling from Rust to JS CallbackInterfaceEntityUpdateCallbackMethod0

// Callback function: uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0::UniffiCallbackInterfaceEntityUpdateCallbackMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_entity
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_entity = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_entity);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_entity
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceEntityUpdateCallbackMethod0: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_entity, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_entity, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceEntityUpdateCallbackMethod0
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_entity, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_entity
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_entity
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0
    // Implementation of callback function calling from Rust to JS CallbackInterfaceEntityUpdateCallbackMethod1

// Callback function: uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1::UniffiCallbackInterfaceEntityUpdateCallbackMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_error
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_error = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_error);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_error
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceEntityUpdateCallbackMethod1: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_error, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceEntityUpdateCallbackMethod1
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_error
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_error
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1
    // Implementation of callback function calling from Rust to JS CallbackInterfaceEventUpdateCallbackMethod0

// Callback function: uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0::UniffiCallbackInterfaceEventUpdateCallbackMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_event
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_event = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_event);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_event
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceEventUpdateCallbackMethod0: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_event, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_event, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceEventUpdateCallbackMethod0
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_event, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_event
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_event
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0
    // Implementation of callback function calling from Rust to JS CallbackInterfaceEventUpdateCallbackMethod1

// Callback function: uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1::UniffiCallbackInterfaceEventUpdateCallbackMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_error
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_error = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_error);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_error
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceEventUpdateCallbackMethod1: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_error, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceEventUpdateCallbackMethod1
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_error
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_error
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTokenBalanceUpdateCallbackMethod0

// Callback function: uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0::UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_balance
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_balance = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_balance);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_balance
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_balance, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_balance, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod0
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_balance, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_balance
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_balance
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTokenBalanceUpdateCallbackMethod1

// Callback function: uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1::UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_error
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_error = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_error);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_error
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_error, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTokenBalanceUpdateCallbackMethod1
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_error
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_error
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTokenUpdateCallbackMethod0

// Callback function: uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0::UniffiCallbackInterfaceTokenUpdateCallbackMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_token
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_token = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_token);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_token
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTokenUpdateCallbackMethod0: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_token, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_token, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTokenUpdateCallbackMethod0
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_token, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_token
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_token
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTokenUpdateCallbackMethod1

// Callback function: uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1::UniffiCallbackInterfaceTokenUpdateCallbackMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_error
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_error = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_error);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_error
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTokenUpdateCallbackMethod1: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_error, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTokenUpdateCallbackMethod1
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_error
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_error
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTransactionUpdateCallbackMethod0

// Callback function: uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0::UniffiCallbackInterfaceTransactionUpdateCallbackMethod0
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_transaction
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_transaction = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_transaction);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_transaction
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTransactionUpdateCallbackMethod0: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_transaction, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_transaction, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTransactionUpdateCallbackMethod0
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_transaction, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_transaction
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_transaction
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0
    // Implementation of callback function calling from Rust to JS CallbackInterfaceTransactionUpdateCallbackMethod1

// Callback function: uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1::UniffiCallbackInterfaceTransactionUpdateCallbackMethod1
//
// We have the following constraints:
// - we need to pass a function pointer to Rust.
// - we need a jsi::Runtime and jsi::Function to call into JS.
// - function pointers can't store state, so we can't use a lamda.
//
// For this, we store a lambda as a global, as `rsLambda`. The `callback` function calls
// the lambda, which itself calls the `body` which then calls into JS.
//
// We then give the `callback` function pointer to Rust which will call the lambda sometime in the
// future.
namespace uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1 {
    using namespace facebook;

    // We need to store a lambda in a global so we can call it from
    // a function pointer. The function pointer is passed to Rust.
    static std::function<void(uint64_t, RustBuffer, void *, RustCallStatus*)> rsLambda = nullptr;

    // This is the main body of the callback. It's called from the lambda,
    // which itself is called from the callback function which is passed to Rust.
    static void body(jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     std::shared_ptr<jsi::Value> callbackValue
            ,uint64_t rs_uniffiHandle
            ,RustBuffer rs_error
            ,void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {

        // Convert the arguments from Rust, into jsi::Values.
        // We'll use the Bridging class to do this…
        auto js_uniffiHandle = uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, rs_uniffiHandle);
        auto js_error = uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, rs_error);

        // Now we are ready to call the callback.
        // We are already on the JS thread, because this `body` function was
        // invoked from the CallInvoker.
        try {
            // Getting the callback function
            auto cb = callbackValue->asObject(rt).asFunction(rt);
            auto uniffiResult = cb.call(rt, js_uniffiHandle, js_error
            );

            // Now copy the result back from JS into the RustCallStatus object.
            uniffi::dojo::Bridging<RustCallStatus>::copyFromJs(rt, callInvoker, uniffiResult, uniffi_call_status);

            if (uniffi_call_status->code != UNIFFI_CALL_STATUS_OK) {
                // The JS callback finished abnormally, so we cannot retrieve the return value.
                return;
            }

            
        } catch (const jsi::JSError &error) {
            std::cout << "Error in callback UniffiCallbackInterfaceTransactionUpdateCallbackMethod1: "
                    << error.what() << std::endl;
            throw error;
        }
    }

    static void callback(uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
        // If the runtime has shutdown, then there is no point in trying to
        // call into Javascript. BUT how do we tell if the runtime has shutdown?
        //
        // Answer: the module destructor calls into callback `cleanup` method,
        // which nulls out the rsLamda.
        //
        // If rsLamda is null, then there is no runtime to call into.
        if (rsLambda == nullptr) {
            // This only occurs when destructors are calling into Rust free/drop,
            // which causes the JS callback to be dropped.
            return;
        }

        // The runtime, the actual callback jsi::funtion, and the callInvoker
        // are all in the lambda.
        rsLambda(
            rs_uniffiHandle, 
            rs_error, 
            rs_uniffiOutReturn, uniffi_call_status);
    }

    static UniffiCallbackInterfaceTransactionUpdateCallbackMethod1
    makeCallbackFunction( // uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1
                    jsi::Runtime &rt,
                     std::shared_ptr<uniffi_runtime::UniffiCallInvoker> callInvoker,
                     const jsi::Value &value) {
        if (rsLambda != nullptr) {
            // `makeCallbackFunction` is called in two circumstances:
            //
            // 1. at startup, when initializing callback interface vtables.
            // 2. when polling futures. This happens at least once per future that is
            //    exposed to Javascript. We know that this is always the same function,
            //    `uniffiFutureContinuationCallback` in `async-rust-calls.ts`.
            //
            // We can therefore return the callback function without making anything
            // new if we've been initialized already.
            return callback;
        }
        auto callbackFunction = value.asObject(rt).asFunction(rt);
        auto callbackValue = std::make_shared<jsi::Value>(rt, callbackFunction);
        rsLambda = [&rt, callInvoker, callbackValue](uint64_t rs_uniffiHandle, RustBuffer rs_error, void * rs_uniffiOutReturn, RustCallStatus* uniffi_call_status) {
                // We immediately make a lambda which will do the work of transforming the
                // arguments into JSI values and calling the callback.
                uniffi_runtime::UniffiCallFunc jsLambda = [
                    callInvoker,
                    callbackValue
                    , rs_uniffiHandle
                    , rs_error
                    , rs_uniffiOutReturn, uniffi_call_status](jsi::Runtime &rt) mutable {
                    body(rt, callInvoker, callbackValue
                        , rs_uniffiHandle
                        , rs_error
                        , rs_uniffiOutReturn, uniffi_call_status);
                };
                // We'll then call that lambda from the callInvoker which will
                // look after calling it on the correct thread.
                callInvoker->invokeBlocking(rt, jsLambda);
        };
        return callback;
    }

    // This method is called from the destructor of NativeDojo, which only happens
    // when the jsi::Runtime is being destroyed.
    static void cleanup() {
        // The lambda holds a reference to the the Runtime, so when this is nulled out,
        // then the pointer will no longer be left dangling.
        rsLambda = nullptr;
    }
} // namespace uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceEntityUpdateCallback> {
  static UniffiVTableCallbackInterfaceEntityUpdateCallback fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiVTableCallbackInterfaceEntityUpdateCallback");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceEntityUpdateCallback rsObject;

    // Create the vtable from the js callbacks.
    rsObject.uniffi_free = uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiFree")
        );
    rsObject.uniffi_clone = uniffi::dojo::cb::callbackinterfaceclone::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiClone")
        );
    rsObject.on_update = uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onUpdate")
        );
    rsObject.on_error = uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onError")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceEventUpdateCallback> {
  static UniffiVTableCallbackInterfaceEventUpdateCallback fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiVTableCallbackInterfaceEventUpdateCallback");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceEventUpdateCallback rsObject;

    // Create the vtable from the js callbacks.
    rsObject.uniffi_free = uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiFree")
        );
    rsObject.uniffi_clone = uniffi::dojo::cb::callbackinterfaceclone::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiClone")
        );
    rsObject.on_update = uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onUpdate")
        );
    rsObject.on_error = uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onError")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback> {
  static UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback rsObject;

    // Create the vtable from the js callbacks.
    rsObject.uniffi_free = uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiFree")
        );
    rsObject.uniffi_clone = uniffi::dojo::cb::callbackinterfaceclone::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiClone")
        );
    rsObject.on_update = uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onUpdate")
        );
    rsObject.on_error = uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onError")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceTokenUpdateCallback> {
  static UniffiVTableCallbackInterfaceTokenUpdateCallback fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiVTableCallbackInterfaceTokenUpdateCallback");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceTokenUpdateCallback rsObject;

    // Create the vtable from the js callbacks.
    rsObject.uniffi_free = uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiFree")
        );
    rsObject.uniffi_clone = uniffi::dojo::cb::callbackinterfaceclone::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiClone")
        );
    rsObject.on_update = uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onUpdate")
        );
    rsObject.on_error = uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onError")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo
namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiVTableCallbackInterfaceTransactionUpdateCallback> {
  static UniffiVTableCallbackInterfaceTransactionUpdateCallback fromJs(jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &jsValue
  ) {
    // Check if the input is an object
    if (!jsValue.isObject()) {
      throw jsi::JSError(rt, "Expected an object for UniffiVTableCallbackInterfaceTransactionUpdateCallback");
    }

    // Get the object from the jsi::Value
    auto jsObject = jsValue.getObject(rt);

    // Create the vtable struct
    UniffiVTableCallbackInterfaceTransactionUpdateCallback rsObject;

    // Create the vtable from the js callbacks.
    rsObject.uniffi_free = uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiFree")
        );
    rsObject.uniffi_clone = uniffi::dojo::cb::callbackinterfaceclone::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "uniffiClone")
        );
    rsObject.on_update = uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onUpdate")
        );
    rsObject.on_error = uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1::makeCallbackFunction(
          rt, callInvoker, jsObject.getProperty(rt, "onError")
        );

    return rsObject;
  }
};

} // namespace uniffi::dojo


namespace uniffi::dojo {
using namespace facebook;
using CallInvoker = uniffi_runtime::UniffiCallInvoker;

template <> struct Bridging<UniffiRustFutureContinuationCallback> {
  static UniffiRustFutureContinuationCallback fromJs(
    jsi::Runtime &rt,
    std::shared_ptr<CallInvoker> callInvoker,
    const jsi::Value &value
  ) {
    try {
      return uniffi::dojo::cb::rustfuturecontinuationcallback::makeCallbackFunction(
        rt,
        callInvoker,
        value
      );
    } catch (const std::logic_error &e) {
      throw jsi::JSError(rt, e.what());
    }
  }
};

} // namespace uniffi::dojo

NativeDojo::NativeDojo(
    jsi::Runtime &rt,
    std::shared_ptr<uniffi_runtime::UniffiCallInvoker> invoker
) : callInvoker(invoker), props() {
    // Map from Javascript names to the cpp names
    props["ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_byte_length"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_func_ffi__string_to_arraybuffer"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_internal_fn_func_ffi__arraybuffer_to_string"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_clone_toriiclient"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_clone_toriiclient"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_clone_toriiclient(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_free_toriiclient"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_free_toriiclient"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_free_toriiclient(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_constructor_toriiclient_new"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_constructor_toriiclient_new"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_constructor_toriiclient_new(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_achievements"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_achievements"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_achievements(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_activities"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_activities"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_activities(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_aggregations"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_aggregations"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_contracts"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_contracts"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_contracts(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_controllers"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_controllers"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_controllers(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_entities"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_entities"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_entities(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_event_messages"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_event_messages"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_sql"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_sql"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_sql(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates"),
        4,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates"),
        3,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates"),
        5,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates"),
        4,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates"),
        3,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_balances"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_balances"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_tokens"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_tokens"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_tokens(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_transactions"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_transactions"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_transactions(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_worlds"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_method_toriiclient_worlds"),
        2,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_method_toriiclient_worlds(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback"),
        1,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_achievements"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_achievements"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_achievements(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_activities"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_activities"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_activities(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_contracts"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_contracts"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_contracts(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_controllers"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_controllers"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_controllers(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_entities"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_entities"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_entities(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_sql"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_sql"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_sql(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_tokens"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_tokens"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_tokens(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_transactions"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_transactions"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_transactions(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_worlds"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_toriiclient_worlds"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_worlds(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update(rt, thisVal, args, count);
        }
    );
    props["ubrn_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error(rt, thisVal, args, count);
        }
    );
    props["ubrn_ffi_dojo_uniffi_uniffi_contract_version"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_ffi_dojo_uniffi_uniffi_contract_version"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_dojo_uniffi_uniffi_contract_version(rt, thisVal, args, count);
        }
    );
    props["ubrn_ffi_ToriiClient__bless_pointer"] = jsi::Function::createFromHostFunction(
        rt,
        jsi::PropNameID::forAscii(rt, "ubrn_ffi_ToriiClient__bless_pointer"),
        0,
        [this](jsi::Runtime &rt, const jsi::Value &thisVal, const jsi::Value *args, size_t count) -> jsi::Value {
            return this->cpp_ffi_ToriiClient__bless_pointer(rt, thisVal, args, count);
        }
    );
}

void NativeDojo::registerModule(jsi::Runtime &rt, std::shared_ptr<react::CallInvoker> callInvoker) {
    auto invoker = std::make_shared<uniffi_runtime::UniffiCallInvoker>(callInvoker);
    auto tm = std::make_shared<NativeDojo>(rt, invoker);
    auto obj = rt.global().createFromHostObject(rt, tm);
    rt.global().setProperty(rt, "NativeDojo", obj);
}

void NativeDojo::unregisterModule(jsi::Runtime &rt) {
    uniffi::dojo::registry::clearRegistry();
}

jsi::Value NativeDojo::get(jsi::Runtime& rt, const jsi::PropNameID& name) {
    try {
        return jsi::Value(rt, props.at(name.utf8(rt)));
    }
    catch (std::out_of_range &e) {
        return jsi::Value::undefined();
    }
}

std::vector<jsi::PropNameID> NativeDojo::getPropertyNames(jsi::Runtime& rt) {
    std::vector<jsi::PropNameID> rval;
    for (auto& [key, value] : props) {
        rval.push_back(jsi::PropNameID::forUtf8(rt, key));
    }
    return rval;
}

void NativeDojo::set(jsi::Runtime& rt, const jsi::PropNameID& name, const jsi::Value& value) {
    props.insert_or_assign(name.utf8(rt), &value);
}

NativeDojo::~NativeDojo() {
    // Cleanup for callback function RustFutureContinuationCallback
uniffi::dojo::cb::rustfuturecontinuationcallback::cleanup();
    // Cleanup for "free" callback function CallbackInterfaceFree
uniffi::dojo::st::vtablecallbackinterfaceentityupdatecallback::vtablecallbackinterfaceentityupdatecallback::free::cleanup();uniffi::dojo::st::vtablecallbackinterfaceeventupdatecallback::vtablecallbackinterfaceeventupdatecallback::free::cleanup();uniffi::dojo::st::vtablecallbackinterfacetokenbalanceupdatecallback::vtablecallbackinterfacetokenbalanceupdatecallback::free::cleanup();uniffi::dojo::st::vtablecallbackinterfacetokenupdatecallback::vtablecallbackinterfacetokenupdatecallback::free::cleanup();uniffi::dojo::st::vtablecallbackinterfacetransactionupdatecallback::vtablecallbackinterfacetransactionupdatecallback::free::cleanup();
    // Cleanup for callback function CallbackInterfaceClone
uniffi::dojo::cb::callbackinterfaceclone::cleanup();
    // Cleanup for callback function CallbackInterfaceEntityUpdateCallbackMethod0
uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod0::cleanup();
    // Cleanup for callback function CallbackInterfaceEntityUpdateCallbackMethod1
uniffi::dojo::cb::callbackinterfaceentityupdatecallbackmethod1::cleanup();
    // Cleanup for callback function CallbackInterfaceEventUpdateCallbackMethod0
uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod0::cleanup();
    // Cleanup for callback function CallbackInterfaceEventUpdateCallbackMethod1
uniffi::dojo::cb::callbackinterfaceeventupdatecallbackmethod1::cleanup();
    // Cleanup for callback function CallbackInterfaceTokenBalanceUpdateCallbackMethod0
uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod0::cleanup();
    // Cleanup for callback function CallbackInterfaceTokenBalanceUpdateCallbackMethod1
uniffi::dojo::cb::callbackinterfacetokenbalanceupdatecallbackmethod1::cleanup();
    // Cleanup for callback function CallbackInterfaceTokenUpdateCallbackMethod0
uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod0::cleanup();
    // Cleanup for callback function CallbackInterfaceTokenUpdateCallbackMethod1
uniffi::dojo::cb::callbackinterfacetokenupdatecallbackmethod1::cleanup();
    // Cleanup for callback function CallbackInterfaceTransactionUpdateCallbackMethod0
uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod0::cleanup();
    // Cleanup for callback function CallbackInterfaceTransactionUpdateCallbackMethod1
uniffi::dojo::cb::callbackinterfacetransactionupdatecallbackmethod1::cleanup();
}

// Utility functions for serialization/deserialization of strings.
jsi::Value NativeDojo::cpp_uniffi_internal_fn_func_ffi__string_to_byte_length(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    return uniffi_jsi::Bridging<std::string>::string_to_bytelength(rt, args[0]);
}

jsi::Value NativeDojo::cpp_uniffi_internal_fn_func_ffi__string_to_arraybuffer(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    return uniffi_jsi::Bridging<std::string>::string_to_arraybuffer(rt, args[0]);
}

jsi::Value NativeDojo::cpp_uniffi_internal_fn_func_ffi__arraybuffer_to_string(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    return uniffi_jsi::Bridging<std::string>::arraybuffer_to_string(rt, args[0]);
}jsi::Value NativeDojo::cpp_ffi_ToriiClient__bless_pointer(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto pointer = uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]);
    auto static destructor = [](uint64_t p) {
        auto pointer = reinterpret_cast<void *>(static_cast<uintptr_t>(p));
        RustCallStatus status = {0};
        uniffi_dojo_uniffi_fn_free_toriiclient(pointer, &status);
    };
    auto ptrObj = std::make_shared<uniffi_jsi::DestructibleObject>(pointer, destructor);
    auto obj = jsi::Object::createFromHostObject(rt, ptrObj);
    return jsi::Value(rt, obj);
}

// Methods calling directly into the uniffi generated C API of the Rust crate.
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_clone_toriiclient(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_clone_toriiclient(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_free_toriiclient(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        uniffi_dojo_uniffi_fn_free_toriiclient(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_constructor_toriiclient_new(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_constructor_toriiclient_new(uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_constructor_toriiclient_new_with_config(uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[0]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_achievements(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_achievements(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_activities(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_activities(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_aggregations(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        uniffi_dojo_uniffi_fn_method_toriiclient_cancel_subscription(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_contracts(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_contracts(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_controllers(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_controllers(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_entities(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_entities(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_event_messages(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_player_achievements(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_publish_message(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_publish_message_batch(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_sql(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_sql(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_starknet_events(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_entity_updates(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_event_updates(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_balance_updates(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[3]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[4]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_token_updates(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[2]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[3]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_subscribe_transaction_updates(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[2]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi_jsi::Bridging<uint64_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_token_balances(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_token_contracts(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_token_transfers(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_tokens(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_tokens(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_transactions(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_transactions(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_method_toriiclient_worlds(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        RustCallStatus status = uniffi::dojo::Bridging<RustCallStatus>::rustSuccess(rt);
        auto value = uniffi_dojo_uniffi_fn_method_toriiclient_worlds(uniffi_jsi::Bridging<uint64_t>::fromJs(rt, callInvoker, args[0]), uniffi::dojo::Bridging<RustBuffer>::fromJs(rt, callInvoker, args[1]), 
            &status
        );
        uniffi::dojo::Bridging<RustCallStatus>::copyIntoJs(rt, callInvoker, status, args[count - 1]);

        
        return uniffi::dojo::Bridging<RustBuffer>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto vtableInstance =
        uniffi::dojo::Bridging<UniffiVTableCallbackInterfaceEntityUpdateCallback>::fromJs(
            rt,
            callInvoker,
            args[0]
        );

    std::lock_guard<std::mutex> lock(uniffi::dojo::registry::vtableMutex);
    uniffi_dojo_uniffi_fn_init_callback_vtable_entityupdatecallback(
        uniffi::dojo::registry::putTable(
            "UniffiVTableCallbackInterfaceEntityUpdateCallback",
            vtableInstance
        )
    );
    return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto vtableInstance =
        uniffi::dojo::Bridging<UniffiVTableCallbackInterfaceEventUpdateCallback>::fromJs(
            rt,
            callInvoker,
            args[0]
        );

    std::lock_guard<std::mutex> lock(uniffi::dojo::registry::vtableMutex);
    uniffi_dojo_uniffi_fn_init_callback_vtable_eventupdatecallback(
        uniffi::dojo::registry::putTable(
            "UniffiVTableCallbackInterfaceEventUpdateCallback",
            vtableInstance
        )
    );
    return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto vtableInstance =
        uniffi::dojo::Bridging<UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback>::fromJs(
            rt,
            callInvoker,
            args[0]
        );

    std::lock_guard<std::mutex> lock(uniffi::dojo::registry::vtableMutex);
    uniffi_dojo_uniffi_fn_init_callback_vtable_tokenbalanceupdatecallback(
        uniffi::dojo::registry::putTable(
            "UniffiVTableCallbackInterfaceTokenBalanceUpdateCallback",
            vtableInstance
        )
    );
    return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto vtableInstance =
        uniffi::dojo::Bridging<UniffiVTableCallbackInterfaceTokenUpdateCallback>::fromJs(
            rt,
            callInvoker,
            args[0]
        );

    std::lock_guard<std::mutex> lock(uniffi::dojo::registry::vtableMutex);
    uniffi_dojo_uniffi_fn_init_callback_vtable_tokenupdatecallback(
        uniffi::dojo::registry::putTable(
            "UniffiVTableCallbackInterfaceTokenUpdateCallback",
            vtableInstance
        )
    );
    return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
    auto vtableInstance =
        uniffi::dojo::Bridging<UniffiVTableCallbackInterfaceTransactionUpdateCallback>::fromJs(
            rt,
            callInvoker,
            args[0]
        );

    std::lock_guard<std::mutex> lock(uniffi::dojo::registry::vtableMutex);
    uniffi_dojo_uniffi_fn_init_callback_vtable_transactionupdatecallback(
        uniffi::dojo::registry::putTable(
            "UniffiVTableCallbackInterfaceTransactionUpdateCallback",
            vtableInstance
        )
    );
    return jsi::Value::undefined();
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_achievements(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_achievements(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_activities(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_activities(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_aggregations(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_cancel_subscription(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_contracts(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_contracts(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_controllers(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_controllers(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_entities(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_entities(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_event_messages(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_player_achievements(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_publish_message_batch(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_sql(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_sql(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_starknet_events(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_entity_updates(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_event_updates(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_balance_updates(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_token_updates(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_subscribe_transaction_updates(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_token_balances(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_token_contracts(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_token_transfers(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_tokens(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_tokens(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_transactions(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_transactions(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_toriiclient_worlds(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_toriiclient_worlds(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_constructor_toriiclient_new(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_constructor_toriiclient_new_with_config(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_update(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_entityupdatecallback_on_error(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_update(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_eventupdatecallback_on_error(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_update(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_tokenbalanceupdatecallback_on_error(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_update(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_tokenupdatecallback_on_error(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_update(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = uniffi_dojo_uniffi_checksum_method_transactionupdatecallback_on_error(
        );

        
        return uniffi_jsi::Bridging<uint16_t>::toJs(rt, callInvoker, value);
}
jsi::Value NativeDojo::cpp_ffi_dojo_uniffi_uniffi_contract_version(jsi::Runtime& rt, const jsi::Value& thisVal, const jsi::Value* args, size_t count) {
        auto value = ffi_dojo_uniffi_uniffi_contract_version(
        );

        
        return uniffi_jsi::Bridging<uint32_t>::toJs(rt, callInvoker, value);
}